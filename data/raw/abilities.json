{
  "noability": {
    "isNonstandard": "Past",
    "flags": {},
    "name": "No Ability",
    "rating": 0.1,
    "num": 0
  },
  "adaptability": {
    "onModifySTAB": "onModifySTAB(stab, source, target, move) {\n            if (move.forceSTAB || source.hasType(move.type)) {\n                if (stab === 2) {\n                    return 2.25;\n                }\n                return 2;\n            }\n        }",
    "flags": {},
    "name": "Adaptability",
    "rating": 4,
    "num": 91
  },
  "aerilate": {
    "onModifyTypePriority": -1,
    "onModifyType": "onModifyType(move, pokemon) {\n            const noModifyType = [\n                'judgment', 'multiattack', 'naturalgift', 'revelationdance', 'technoblast', 'terrainpulse', 'weatherball',\n            ];\n            if (move.type === 'Normal' && (!noModifyType.includes(move.id) || this.activeMove?.isMax) &&\n                !(move.isZ && move.category !== 'Status') && !(move.name === 'Tera Blast' && pokemon.terastallized)) {\n                move.type = 'Flying';\n                move.typeChangerBoosted = this.effect;\n            }\n        }",
    "onBasePowerPriority": 23,
    "onBasePower": "onBasePower(basePower, pokemon, target, move) {\n            if (move.typeChangerBoosted === this.effect)\n                return this.chainModify([4915, 4096]);\n        }",
    "flags": {},
    "name": "Aerilate",
    "rating": 4,
    "num": 184
  },
  "aftermath": {
    "onDamagingHitOrder": 1,
    "onDamagingHit": "onDamagingHit(damage, target, source, move) {\n            if (!target.hp && this.checkMoveMakesContact(move, source, target, true)) {\n                this.damage(source.baseMaxhp / 4, source, target);\n            }\n        }",
    "flags": {},
    "name": "Aftermath",
    "rating": 2,
    "num": 106
  },
  "airlock": {
    "onSwitchIn": "onSwitchIn(pokemon) {\n            // Air Lock does not activate when Skill Swapped or when Neutralizing Gas leaves the field\n            this.add('-ability', pokemon, 'Air Lock');\n            this.effect.onStart.call(this, pokemon);\n        }",
    "onStart": "onStart(pokemon) {\n            pokemon.abilityState.ending = false; // Clear the ending flag\n            this.eachEvent('WeatherChange', this.effect);\n        }",
    "onEnd": "onEnd(pokemon) {\n            pokemon.abilityState.ending = true;\n            this.eachEvent('WeatherChange', this.effect);\n        }",
    "suppressWeather": true,
    "flags": {},
    "name": "Air Lock",
    "rating": 1.5,
    "num": 76
  },
  "analytic": {
    "onBasePowerPriority": 21,
    "onBasePower": "onBasePower(basePower, pokemon) {\n            let boosted = true;\n            for (const target of this.getAllActive()) {\n                if (target === pokemon)\n                    continue;\n                if (this.queue.willMove(target)) {\n                    boosted = false;\n                    break;\n                }\n            }\n            if (boosted) {\n                this.debug('Analytic boost');\n                return this.chainModify([5325, 4096]);\n            }\n        }",
    "flags": {},
    "name": "Analytic",
    "rating": 2.5,
    "num": 148
  },
  "angerpoint": {
    "onHit": "onHit(target, source, move) {\n            if (!target.hp)\n                return;\n            if (move?.effectType === 'Move' && target.getMoveHitData(move).crit) {\n                this.boost({ atk: 12 }, target, target);\n            }\n        }",
    "flags": {},
    "name": "Anger Point",
    "rating": 1,
    "num": 83
  },
  "angershell": {
    "onDamage": "onDamage(damage, target, source, effect) {\n            if (effect.effectType === \"Move\" &&\n                !effect.multihit &&\n                !(effect.hasSheerForce && source.hasAbility('sheerforce'))) {\n                this.effectState.checkedAngerShell = false;\n            }\n            else {\n                this.effectState.checkedAngerShell = true;\n            }\n        }",
    "onTryEatItem": "onTryEatItem(item) {\n            const healingItems = [\n                'aguavberry', 'enigmaberry', 'figyberry', 'iapapaberry', 'magoberry', 'sitrusberry', 'wikiberry', 'oranberry', 'berryjuice',\n            ];\n            if (healingItems.includes(item.id)) {\n                return this.effectState.checkedAngerShell;\n            }\n            return true;\n        }",
    "onAfterMoveSecondary": "onAfterMoveSecondary(target, source, move) {\n            this.effectState.checkedAngerShell = true;\n            if (!source || source === target || !target.hp || !move.totalDamage)\n                return;\n            const lastAttackedBy = target.getLastAttackedBy();\n            if (!lastAttackedBy)\n                return;\n            const damage = move.multihit ? move.totalDamage : lastAttackedBy.damage;\n            if (target.hp <= target.maxhp / 2 && target.hp + damage > target.maxhp / 2) {\n                this.boost({ atk: 1, spa: 1, spe: 1, def: -1, spd: -1 }, target, target);\n            }\n        }",
    "flags": {},
    "name": "Anger Shell",
    "rating": 3,
    "num": 271
  },
  "anticipation": {
    "onStart": "onStart(pokemon) {\n            for (const target of pokemon.foes()) {\n                for (const moveSlot of target.moveSlots) {\n                    const move = this.dex.moves.get(moveSlot.move);\n                    if (move.category === 'Status')\n                        continue;\n                    const moveType = move.id === 'hiddenpower' ? target.hpType : move.type;\n                    if (this.dex.getImmunity(moveType, pokemon) && this.dex.getEffectiveness(moveType, pokemon) > 0 ||\n                        move.ohko) {\n                        this.add('-ability', pokemon, 'Anticipation');\n                        return;\n                    }\n                }\n            }\n        }",
    "flags": {},
    "name": "Anticipation",
    "rating": 0.5,
    "num": 107
  },
  "arenatrap": {
    "onFoeTrapPokemon": "onFoeTrapPokemon(pokemon) {\n            if (!pokemon.isAdjacent(this.effectState.target))\n                return;\n            if (pokemon.isGrounded()) {\n                pokemon.tryTrap(true);\n            }\n        }",
    "onFoeMaybeTrapPokemon": "onFoeMaybeTrapPokemon(pokemon, source) {\n            if (!source)\n                source = this.effectState.target;\n            if (!source || !pokemon.isAdjacent(source))\n                return;\n            if (pokemon.isGrounded(!pokemon.knownType)) { // Negate immunity if the type is unknown\n                pokemon.maybeTrapped = true;\n            }\n        }",
    "flags": {},
    "name": "Arena Trap",
    "rating": 5,
    "num": 71
  },
  "armortail": {
    "onFoeTryMove": "onFoeTryMove(target, source, move) {\n            const targetAllExceptions = ['perishsong', 'flowershield', 'rototiller'];\n            if (move.target === 'foeSide' || (move.target === 'all' && !targetAllExceptions.includes(move.id))) {\n                return;\n            }\n            const armorTailHolder = this.effectState.target;\n            if ((source.isAlly(armorTailHolder) || move.target === 'all') && move.priority > 0.1) {\n                this.attrLastMove('[still]');\n                this.add('cant', armorTailHolder, 'ability: Armor Tail', move, `[of] ${target}`);\n                return false;\n            }\n        }",
    "flags": {
      "breakable": 1
    },
    "name": "Armor Tail",
    "rating": 2.5,
    "num": 296
  },
  "aromaveil": {
    "onAllyTryAddVolatile": "onAllyTryAddVolatile(status, target, source, effect) {\n            if (['attract', 'disable', 'encore', 'healblock', 'taunt', 'torment'].includes(status.id)) {\n                if (effect.effectType === 'Move') {\n                    const effectHolder = this.effectState.target;\n                    this.add('-block', target, 'ability: Aroma Veil', `[of] ${effectHolder}`);\n                }\n                return null;\n            }\n        }",
    "flags": {
      "breakable": 1
    },
    "name": "Aroma Veil",
    "rating": 2,
    "num": 165
  },
  "asoneglastrier": {
    "onSwitchInPriority": 1,
    "onStart": "onStart(pokemon) {\n            if (this.effectState.unnerved)\n                return;\n            this.add('-ability', pokemon, 'As One');\n            this.add('-ability', pokemon, 'Unnerve');\n            this.effectState.unnerved = true;\n        }",
    "onEnd": "onEnd() {\n            this.effectState.unnerved = false;\n        }",
    "onFoeTryEatItem": "onFoeTryEatItem() {\n            return !this.effectState.unnerved;\n        }",
    "onSourceAfterFaint": "onSourceAfterFaint(length, target, source, effect) {\n            if (effect && effect.effectType === 'Move') {\n                this.boost({ atk: length }, source, source, this.dex.abilities.get('chillingneigh'));\n            }\n        }",
    "flags": {
      "failroleplay": 1,
      "noreceiver": 1,
      "noentrain": 1,
      "notrace": 1,
      "failskillswap": 1,
      "cantsuppress": 1
    },
    "name": "As One (Glastrier)",
    "rating": 3.5,
    "num": 266
  },
  "asonespectrier": {
    "onSwitchInPriority": 1,
    "onStart": "onStart(pokemon) {\n            if (this.effectState.unnerved)\n                return;\n            this.add('-ability', pokemon, 'As One');\n            this.add('-ability', pokemon, 'Unnerve');\n            this.effectState.unnerved = true;\n        }",
    "onEnd": "onEnd() {\n            this.effectState.unnerved = false;\n        }",
    "onFoeTryEatItem": "onFoeTryEatItem() {\n            return !this.effectState.unnerved;\n        }",
    "onSourceAfterFaint": "onSourceAfterFaint(length, target, source, effect) {\n            if (effect && effect.effectType === 'Move') {\n                this.boost({ spa: length }, source, source, this.dex.abilities.get('grimneigh'));\n            }\n        }",
    "flags": {
      "failroleplay": 1,
      "noreceiver": 1,
      "noentrain": 1,
      "notrace": 1,
      "failskillswap": 1,
      "cantsuppress": 1
    },
    "name": "As One (Spectrier)",
    "rating": 3.5,
    "num": 267
  },
  "aurabreak": {
    "onStart": "onStart(pokemon) {\n            this.add('-ability', pokemon, 'Aura Break');\n        }",
    "onAnyTryPrimaryHit": "onAnyTryPrimaryHit(target, source, move) {\n            if (target === source || move.category === 'Status')\n                return;\n            move.hasAuraBreak = true;\n        }",
    "flags": {
      "breakable": 1
    },
    "name": "Aura Break",
    "rating": 1,
    "num": 188
  },
  "baddreams": {
    "onResidualOrder": 28,
    "onResidualSubOrder": 2,
    "onResidual": "onResidual(pokemon) {\n            if (!pokemon.hp)\n                return;\n            for (const target of pokemon.foes()) {\n                if (target.status === 'slp' || target.hasAbility('comatose')) {\n                    this.damage(target.baseMaxhp / 8, target, pokemon);\n                }\n            }\n        }",
    "flags": {},
    "name": "Bad Dreams",
    "rating": 1.5,
    "num": 123
  },
  "ballfetch": {
    "flags": {},
    "name": "Ball Fetch",
    "rating": 0,
    "num": 237
  },
  "battery": {
    "onAllyBasePowerPriority": 22,
    "onAllyBasePower": "onAllyBasePower(basePower, attacker, defender, move) {\n            if (attacker !== this.effectState.target && move.category === 'Special') {\n                this.debug('Battery boost');\n                return this.chainModify([5325, 4096]);\n            }\n        }",
    "flags": {},
    "name": "Battery",
    "rating": 0,
    "num": 217
  },
  "battlearmor": {
    "onCriticalHit": false,
    "flags": {
      "breakable": 1
    },
    "name": "Battle Armor",
    "rating": 1,
    "num": 4
  },
  "battlebond": {
    "onSourceAfterFaint": "onSourceAfterFaint(length, target, source, effect) {\n            if (source.bondTriggered)\n                return;\n            if (effect?.effectType !== 'Move')\n                return;\n            if (source.species.id === 'greninjabond' && source.hp && !source.transformed && source.side.foePokemonLeft()) {\n                this.boost({ atk: 1, spa: 1, spe: 1 }, source, source, this.effect);\n                this.add('-activate', source, 'ability: Battle Bond');\n                source.bondTriggered = true;\n            }\n        }",
    "onModifyMovePriority": -1,
    "onModifyMove": "onModifyMove(move, attacker) {\n            if (move.id === 'watershuriken' && attacker.species.name === 'Greninja-Ash' &&\n                !attacker.transformed) {\n                move.multihit = 3;\n            }\n        }",
    "flags": {
      "failroleplay": 1,
      "noreceiver": 1,
      "noentrain": 1,
      "notrace": 1,
      "failskillswap": 1,
      "cantsuppress": 1
    },
    "name": "Battle Bond",
    "rating": 3.5,
    "num": 210
  },
  "beadsofruin": {
    "onStart": "onStart(pokemon) {\n            if (this.suppressingAbility(pokemon))\n                return;\n            this.add('-ability', pokemon, 'Beads of Ruin');\n        }",
    "onAnyModifySpD": "onAnyModifySpD(spd, target, source, move) {\n            const abilityHolder = this.effectState.target;\n            if (target.hasAbility('Beads of Ruin'))\n                return;\n            if (!move.ruinedSpD?.hasAbility('Beads of Ruin'))\n                move.ruinedSpD = abilityHolder;\n            if (move.ruinedSpD !== abilityHolder)\n                return;\n            this.debug('Beads of Ruin SpD drop');\n            return this.chainModify(0.75);\n        }",
    "flags": {},
    "name": "Beads of Ruin",
    "rating": 4.5,
    "num": 284
  },
  "beastboost": {
    "onSourceAfterFaint": "onSourceAfterFaint(length, target, source, effect) {\n            if (effect && effect.effectType === 'Move') {\n                const bestStat = source.getBestStat(true, true);\n                this.boost({ [bestStat]: length }, source);\n            }\n        }",
    "flags": {},
    "name": "Beast Boost",
    "rating": 3.5,
    "num": 224
  },
  "berserk": {
    "onDamage": "onDamage(damage, target, source, effect) {\n            if (effect.effectType === \"Move\" &&\n                !effect.multihit &&\n                !(effect.hasSheerForce && source.hasAbility('sheerforce'))) {\n                this.effectState.checkedBerserk = false;\n            }\n            else {\n                this.effectState.checkedBerserk = true;\n            }\n        }",
    "onTryEatItem": "onTryEatItem(item) {\n            const healingItems = [\n                'aguavberry', 'enigmaberry', 'figyberry', 'iapapaberry', 'magoberry', 'sitrusberry', 'wikiberry', 'oranberry', 'berryjuice',\n            ];\n            if (healingItems.includes(item.id)) {\n                return this.effectState.checkedBerserk;\n            }\n            return true;\n        }",
    "onAfterMoveSecondary": "onAfterMoveSecondary(target, source, move) {\n            this.effectState.checkedBerserk = true;\n            if (!source || source === target || !target.hp || !move.totalDamage)\n                return;\n            const lastAttackedBy = target.getLastAttackedBy();\n            if (!lastAttackedBy)\n                return;\n            const damage = move.multihit && !move.smartTarget ? move.totalDamage : lastAttackedBy.damage;\n            if (target.hp <= target.maxhp / 2 && target.hp + damage > target.maxhp / 2) {\n                this.boost({ spa: 1 }, target, target);\n            }\n        }",
    "flags": {},
    "name": "Berserk",
    "rating": 2,
    "num": 201
  },
  "bigpecks": {
    "onTryBoost": "onTryBoost(boost, target, source, effect) {\n            if (source && target === source)\n                return;\n            if (boost.def && boost.def < 0) {\n                delete boost.def;\n                if (!effect.secondaries && effect.id !== 'octolock') {\n                    this.add(\"-fail\", target, \"unboost\", \"Defense\", \"[from] ability: Big Pecks\", `[of] ${target}`);\n                }\n            }\n        }",
    "flags": {
      "breakable": 1
    },
    "name": "Big Pecks",
    "rating": 0.5,
    "num": 145
  },
  "blaze": {
    "onModifyAtkPriority": 5,
    "onModifyAtk": "onModifyAtk(atk, attacker, defender, move) {\n            if (move.type === 'Fire' && attacker.hp <= attacker.maxhp / 3) {\n                this.debug('Blaze boost');\n                return this.chainModify(1.5);\n            }\n        }",
    "onModifySpAPriority": 5,
    "onModifySpA": "onModifySpA(atk, attacker, defender, move) {\n            if (move.type === 'Fire' && attacker.hp <= attacker.maxhp / 3) {\n                this.debug('Blaze boost');\n                return this.chainModify(1.5);\n            }\n        }",
    "flags": {},
    "name": "Blaze",
    "rating": 2,
    "num": 66
  },
  "bulletproof": {
    "onTryHit": "onTryHit(pokemon, target, move) {\n            if (move.flags['bullet']) {\n                this.add('-immune', pokemon, '[from] ability: Bulletproof');\n                return null;\n            }\n        }",
    "flags": {
      "breakable": 1
    },
    "name": "Bulletproof",
    "rating": 3,
    "num": 171
  },
  "cheekpouch": {
    "onEatItem": "onEatItem(item, pokemon) {\n            this.heal(pokemon.baseMaxhp / 3);\n        }",
    "flags": {},
    "name": "Cheek Pouch",
    "rating": 2,
    "num": 167
  },
  "chillingneigh": {
    "onSourceAfterFaint": "onSourceAfterFaint(length, target, source, effect) {\n            if (effect && effect.effectType === 'Move') {\n                this.boost({ atk: length }, source);\n            }\n        }",
    "flags": {},
    "name": "Chilling Neigh",
    "rating": 3,
    "num": 264
  },
  "chlorophyll": {
    "onModifySpe": "onModifySpe(spe, pokemon) {\n            if (['sunnyday', 'desolateland'].includes(pokemon.effectiveWeather())) {\n                return this.chainModify(2);\n            }\n        }",
    "flags": {},
    "name": "Chlorophyll",
    "rating": 3,
    "num": 34
  },
  "clearbody": {
    "onTryBoost": "onTryBoost(boost, target, source, effect) {\n            if (source && target === source)\n                return;\n            let showMsg = false;\n            let i;\n            for (i in boost) {\n                if (boost[i] < 0) {\n                    delete boost[i];\n                    showMsg = true;\n                }\n            }\n            if (showMsg && !effect.secondaries && effect.id !== 'octolock') {\n                this.add(\"-fail\", target, \"unboost\", \"[from] ability: Clear Body\", `[of] ${target}`);\n            }\n        }",
    "flags": {
      "breakable": 1
    },
    "name": "Clear Body",
    "rating": 2,
    "num": 29
  },
  "cloudnine": {
    "onSwitchIn": "onSwitchIn(pokemon) {\n            // Cloud Nine does not activate when Skill Swapped or when Neutralizing Gas leaves the field\n            this.add('-ability', pokemon, 'Cloud Nine');\n            this.effect.onStart.call(this, pokemon);\n        }",
    "onStart": "onStart(pokemon) {\n            pokemon.abilityState.ending = false; // Clear the ending flag\n            this.eachEvent('WeatherChange', this.effect);\n        }",
    "onEnd": "onEnd(pokemon) {\n            pokemon.abilityState.ending = true;\n            this.eachEvent('WeatherChange', this.effect);\n        }",
    "suppressWeather": true,
    "flags": {},
    "name": "Cloud Nine",
    "rating": 1.5,
    "num": 13
  },
  "colorchange": {
    "onAfterMoveSecondary": "onAfterMoveSecondary(target, source, move) {\n            if (!target.hp)\n                return;\n            const type = move.type;\n            if (target.isActive && move.effectType === 'Move' && move.category !== 'Status' &&\n                type !== '???' && !target.hasType(type)) {\n                if (!target.setType(type))\n                    return false;\n                this.add('-start', target, 'typechange', type, '[from] ability: Color Change');\n                if (target.side.active.length === 2 && target.position === 1) {\n                    // Curse Glitch\n                    const action = this.queue.willMove(target);\n                    if (action && action.move.id === 'curse') {\n                        action.targetLoc = -1;\n                    }\n                }\n            }\n        }",
    "flags": {},
    "name": "Color Change",
    "rating": 0,
    "num": 16
  },
  "comatose": {
    "onStart": "onStart(pokemon) {\n            this.add('-ability', pokemon, 'Comatose');\n        }",
    "onSetStatus": "onSetStatus(status, target, source, effect) {\n            if (effect?.status) {\n                this.add('-immune', target, '[from] ability: Comatose');\n            }\n            return false;\n        }",
    "flags": {
      "failroleplay": 1,
      "noreceiver": 1,
      "noentrain": 1,
      "notrace": 1,
      "failskillswap": 1,
      "cantsuppress": 1
    },
    "name": "Comatose",
    "rating": 4,
    "num": 213
  },
  "commander": {
    "onAnySwitchInPriority": -2,
    "onAnySwitchIn": "onAnySwitchIn() {\n            this.effect.onUpdate.call(this, this.effectState.target);\n        }",
    "onStart": "onStart(pokemon) {\n            this.effect.onUpdate.call(this, pokemon);\n        }",
    "onUpdate": "onUpdate(pokemon) {\n            if (this.gameType !== 'doubles')\n                return;\n            // don't run between when a Pokemon switches in and the resulting onSwitchIn event\n            if (this.queue.peek()?.choice === 'runSwitch')\n                return;\n            const ally = pokemon.allies()[0];\n            if (pokemon.switchFlag || ally?.switchFlag)\n                return;\n            if (!ally || pokemon.baseSpecies.baseSpecies !== 'Tatsugiri' || ally.baseSpecies.baseSpecies !== 'Dondozo') {\n                // Handle any edge cases\n                if (pokemon.getVolatile('commanding'))\n                    pokemon.removeVolatile('commanding');\n                return;\n            }\n            if (!pokemon.getVolatile('commanding')) {\n                // If Dondozo already was commanded this fails\n                if (ally.getVolatile('commanded'))\n                    return;\n                // Cancel all actions this turn for pokemon if applicable\n                this.queue.cancelAction(pokemon);\n                // Add volatiles to both pokemon\n                this.add('-activate', pokemon, 'ability: Commander', `[of] ${ally}`);\n                pokemon.addVolatile('commanding');\n                ally.addVolatile('commanded', pokemon);\n                // Continued in conditions.ts in the volatiles\n            }\n            else {\n                if (!ally.fainted)\n                    return;\n                pokemon.removeVolatile('commanding');\n            }\n        }",
    "flags": {
      "failroleplay": 1,
      "noreceiver": 1,
      "noentrain": 1,
      "notrace": 1,
      "failskillswap": 1
    },
    "name": "Commander",
    "rating": 0,
    "num": 279
  },
  "competitive": {
    "onAfterEachBoost": "onAfterEachBoost(boost, target, source, effect) {\n            if (!source || target.isAlly(source)) {\n                return;\n            }\n            let statsLowered = false;\n            let i;\n            for (i in boost) {\n                if (boost[i] < 0) {\n                    statsLowered = true;\n                }\n            }\n            if (statsLowered) {\n                this.boost({ spa: 2 }, target, target, null, false, true);\n            }\n        }",
    "flags": {},
    "name": "Competitive",
    "rating": 2.5,
    "num": 172
  },
  "compoundeyes": {
    "onSourceModifyAccuracyPriority": -1,
    "onSourceModifyAccuracy": "onSourceModifyAccuracy(accuracy) {\n            if (typeof accuracy !== 'number')\n                return;\n            this.debug('compoundeyes - enhancing accuracy');\n            return this.chainModify([5325, 4096]);\n        }",
    "flags": {},
    "name": "Compound Eyes",
    "rating": 3,
    "num": 14
  },
  "contrary": {
    "onChangeBoost": "onChangeBoost(boost, target, source, effect) {\n            if (effect && effect.id === 'zpower')\n                return;\n            let i;\n            for (i in boost) {\n                boost[i] *= -1;\n            }\n        }",
    "flags": {
      "breakable": 1
    },
    "name": "Contrary",
    "rating": 4.5,
    "num": 126
  },
  "corrosion": {
    "flags": {},
    "name": "Corrosion",
    "rating": 2.5,
    "num": 212
  },
  "costar": {
    "onSwitchInPriority": -2,
    "onStart": "onStart(pokemon) {\n            const ally = pokemon.allies()[0];\n            if (!ally)\n                return;\n            let i;\n            for (i in ally.boosts) {\n                pokemon.boosts[i] = ally.boosts[i];\n            }\n            const volatilesToCopy = ['dragoncheer', 'focusenergy', 'gmaxchistrike', 'laserfocus'];\n            // we need to be sure to remove all the overlapping crit volatiles before trying to add any\n            for (const volatile of volatilesToCopy)\n                pokemon.removeVolatile(volatile);\n            for (const volatile of volatilesToCopy) {\n                if (ally.volatiles[volatile]) {\n                    pokemon.addVolatile(volatile);\n                    if (volatile === 'gmaxchistrike')\n                        pokemon.volatiles[volatile].layers = ally.volatiles[volatile].layers;\n                    if (volatile === 'dragoncheer')\n                        pokemon.volatiles[volatile].hasDragonType = ally.volatiles[volatile].hasDragonType;\n                }\n            }\n            this.add('-copyboost', pokemon, ally, '[from] ability: Costar');\n        }",
    "flags": {},
    "name": "Costar",
    "rating": 0,
    "num": 294
  },
  "cottondown": {
    "onDamagingHit": "onDamagingHit(damage, target, source, move) {\n            let activated = false;\n            for (const pokemon of this.getAllActive()) {\n                if (pokemon === target || pokemon.fainted)\n                    continue;\n                if (!activated) {\n                    this.add('-ability', target, 'Cotton Down');\n                    activated = true;\n                }\n                this.boost({ spe: -1 }, pokemon, target, null, true);\n            }\n        }",
    "flags": {},
    "name": "Cotton Down",
    "rating": 2,
    "num": 238
  },
  "cudchew": {
    "onEatItem": "onEatItem(item, pokemon) {\n            if (item.isBerry && pokemon.addVolatile('cudchew')) {\n                pokemon.volatiles['cudchew'].berry = item;\n            }\n        }",
    "onEnd": "onEnd(pokemon) {\n            delete pokemon.volatiles['cudchew'];\n        }",
    "condition": {
      "noCopy": true,
      "duration": 2,
      "onRestart": "onRestart() {\n                this.effectState.duration = 2;\n            }",
      "onResidualOrder": 28,
      "onResidualSubOrder": 2,
      "onEnd": "onEnd(pokemon) {\n                if (pokemon.hp) {\n                    const item = this.effectState.berry;\n                    this.add('-activate', pokemon, 'ability: Cud Chew');\n                    this.add('-enditem', pokemon, item.name, '[eat]');\n                    if (this.singleEvent('Eat', item, null, pokemon, null, null)) {\n                        this.runEvent('EatItem', pokemon, null, null, item);\n                    }\n                    if (item.onEat)\n                        pokemon.ateBerry = true;\n                }\n            }"
    },
    "flags": {},
    "name": "Cud Chew",
    "rating": 2,
    "num": 291
  },
  "curiousmedicine": {
    "onStart": "onStart(pokemon) {\n            for (const ally of pokemon.adjacentAllies()) {\n                ally.clearBoosts();\n                this.add('-clearboost', ally, '[from] ability: Curious Medicine', `[of] ${pokemon}`);\n            }\n        }",
    "flags": {},
    "name": "Curious Medicine",
    "rating": 0,
    "num": 261
  },
  "cursedbody": {
    "onDamagingHit": "onDamagingHit(damage, target, source, move) {\n            if (source.volatiles['disable'])\n                return;\n            if (!move.isMax && !move.flags['futuremove'] && move.id !== 'struggle') {\n                if (this.randomChance(3, 10)) {\n                    source.addVolatile('disable', this.effectState.target);\n                }\n            }\n        }",
    "flags": {},
    "name": "Cursed Body",
    "rating": 2,
    "num": 130
  },
  "cutecharm": {
    "onDamagingHit": "onDamagingHit(damage, target, source, move) {\n            if (this.checkMoveMakesContact(move, source, target)) {\n                if (this.randomChance(3, 10)) {\n                    source.addVolatile('attract', this.effectState.target);\n                }\n            }\n        }",
    "flags": {},
    "name": "Cute Charm",
    "rating": 0.5,
    "num": 56
  },
  "damp": {
    "onAnyTryMove": "onAnyTryMove(target, source, effect) {\n            if (['explosion', 'mindblown', 'mistyexplosion', 'selfdestruct'].includes(effect.id)) {\n                this.attrLastMove('[still]');\n                this.add('cant', this.effectState.target, 'ability: Damp', effect, `[of] ${target}`);\n                return false;\n            }\n        }",
    "onAnyDamage": "onAnyDamage(damage, target, source, effect) {\n            if (effect && effect.name === 'Aftermath') {\n                return false;\n            }\n        }",
    "flags": {
      "breakable": 1
    },
    "name": "Damp",
    "rating": 0.5,
    "num": 6
  },
  "dancer": {
    "flags": {},
    "name": "Dancer",
    "rating": 1.5,
    "num": 216
  },
  "darkaura": {
    "onStart": "onStart(pokemon) {\n            if (this.suppressingAbility(pokemon))\n                return;\n            this.add('-ability', pokemon, 'Dark Aura');\n        }",
    "onAnyBasePowerPriority": 20,
    "onAnyBasePower": "onAnyBasePower(basePower, source, target, move) {\n            if (target === source || move.category === 'Status' || move.type !== 'Dark')\n                return;\n            if (!move.auraBooster?.hasAbility('Dark Aura'))\n                move.auraBooster = this.effectState.target;\n            if (move.auraBooster !== this.effectState.target)\n                return;\n            return this.chainModify([move.hasAuraBreak ? 3072 : 5448, 4096]);\n        }",
    "flags": {},
    "name": "Dark Aura",
    "rating": 3,
    "num": 186
  },
  "dauntlessshield": {
    "onStart": "onStart(pokemon) {\n            if (pokemon.shieldBoost)\n                return;\n            pokemon.shieldBoost = true;\n            this.boost({ def: 1 }, pokemon);\n        }",
    "flags": {},
    "name": "Dauntless Shield",
    "rating": 3.5,
    "num": 235
  },
  "dazzling": {
    "onFoeTryMove": "onFoeTryMove(target, source, move) {\n            const targetAllExceptions = ['perishsong', 'flowershield', 'rototiller'];\n            if (move.target === 'foeSide' || (move.target === 'all' && !targetAllExceptions.includes(move.id))) {\n                return;\n            }\n            const dazzlingHolder = this.effectState.target;\n            if ((source.isAlly(dazzlingHolder) || move.target === 'all') && move.priority > 0.1) {\n                this.attrLastMove('[still]');\n                this.add('cant', dazzlingHolder, 'ability: Dazzling', move, `[of] ${target}`);\n                return false;\n            }\n        }",
    "flags": {
      "breakable": 1
    },
    "name": "Dazzling",
    "rating": 2.5,
    "num": 219
  },
  "defeatist": {
    "onModifyAtkPriority": 5,
    "onModifyAtk": "onModifyAtk(atk, pokemon) {\n            if (pokemon.hp <= pokemon.maxhp / 2) {\n                return this.chainModify(0.5);\n            }\n        }",
    "onModifySpAPriority": 5,
    "onModifySpA": "onModifySpA(atk, pokemon) {\n            if (pokemon.hp <= pokemon.maxhp / 2) {\n                return this.chainModify(0.5);\n            }\n        }",
    "flags": {},
    "name": "Defeatist",
    "rating": -1,
    "num": 129
  },
  "defiant": {
    "onAfterEachBoost": "onAfterEachBoost(boost, target, source, effect) {\n            if (!source || target.isAlly(source)) {\n                return;\n            }\n            let statsLowered = false;\n            let i;\n            for (i in boost) {\n                if (boost[i] < 0) {\n                    statsLowered = true;\n                }\n            }\n            if (statsLowered) {\n                this.boost({ atk: 2 }, target, target, null, false, true);\n            }\n        }",
    "flags": {},
    "name": "Defiant",
    "rating": 3,
    "num": 128
  },
  "deltastream": {
    "onStart": "onStart(source) {\n            this.field.setWeather('deltastream');\n        }",
    "onAnySetWeather": "onAnySetWeather(target, source, weather) {\n            const strongWeathers = ['desolateland', 'primordialsea', 'deltastream'];\n            if (this.field.getWeather().id === 'deltastream' && !strongWeathers.includes(weather.id))\n                return false;\n        }",
    "onEnd": "onEnd(pokemon) {\n            if (this.field.weatherState.source !== pokemon)\n                return;\n            for (const target of this.getAllActive()) {\n                if (target === pokemon)\n                    continue;\n                if (target.hasAbility('deltastream')) {\n                    this.field.weatherState.source = target;\n                    return;\n                }\n            }\n            this.field.clearWeather();\n        }",
    "flags": {},
    "name": "Delta Stream",
    "rating": 4,
    "num": 191
  },
  "desolateland": {
    "onStart": "onStart(source) {\n            this.field.setWeather('desolateland');\n        }",
    "onAnySetWeather": "onAnySetWeather(target, source, weather) {\n            const strongWeathers = ['desolateland', 'primordialsea', 'deltastream'];\n            if (this.field.getWeather().id === 'desolateland' && !strongWeathers.includes(weather.id))\n                return false;\n        }",
    "onEnd": "onEnd(pokemon) {\n            if (this.field.weatherState.source !== pokemon)\n                return;\n            for (const target of this.getAllActive()) {\n                if (target === pokemon)\n                    continue;\n                if (target.hasAbility('desolateland')) {\n                    this.field.weatherState.source = target;\n                    return;\n                }\n            }\n            this.field.clearWeather();\n        }",
    "flags": {},
    "name": "Desolate Land",
    "rating": 4.5,
    "num": 190
  },
  "disguise": {
    "onDamagePriority": 1,
    "onDamage": "onDamage(damage, target, source, effect) {\n            if (effect?.effectType === 'Move' && ['mimikyu', 'mimikyutotem'].includes(target.species.id)) {\n                this.add('-activate', target, 'ability: Disguise');\n                this.effectState.busted = true;\n                return 0;\n            }\n        }",
    "onCriticalHit": "onCriticalHit(target, source, move) {\n            if (!target)\n                return;\n            if (!['mimikyu', 'mimikyutotem'].includes(target.species.id)) {\n                return;\n            }\n            const hitSub = target.volatiles['substitute'] && !move.flags['bypasssub'] && !(move.infiltrates && this.gen >= 6);\n            if (hitSub)\n                return;\n            if (!target.runImmunity(move))\n                return;\n            return false;\n        }",
    "onEffectiveness": "onEffectiveness(typeMod, target, type, move) {\n            if (!target || move.category === 'Status')\n                return;\n            if (!['mimikyu', 'mimikyutotem'].includes(target.species.id)) {\n                return;\n            }\n            const hitSub = target.volatiles['substitute'] && !move.flags['bypasssub'] && !(move.infiltrates && this.gen >= 6);\n            if (hitSub)\n                return;\n            if (!target.runImmunity(move))\n                return;\n            return 0;\n        }",
    "onUpdate": "onUpdate(pokemon) {\n            if (['mimikyu', 'mimikyutotem'].includes(pokemon.species.id) && this.effectState.busted) {\n                const speciesid = pokemon.species.id === 'mimikyutotem' ? 'Mimikyu-Busted-Totem' : 'Mimikyu-Busted';\n                pokemon.formeChange(speciesid, this.effect, true);\n                this.damage(pokemon.baseMaxhp / 8, pokemon, pokemon, this.dex.species.get(speciesid));\n            }\n        }",
    "flags": {
      "failroleplay": 1,
      "noreceiver": 1,
      "noentrain": 1,
      "notrace": 1,
      "failskillswap": 1,
      "cantsuppress": 1,
      "breakable": 1,
      "notransform": 1
    },
    "name": "Disguise",
    "rating": 3.5,
    "num": 209
  },
  "download": {
    "onStart": "onStart(pokemon) {\n            let totaldef = 0;\n            let totalspd = 0;\n            for (const target of pokemon.foes()) {\n                totaldef += target.getStat('def', false, true);\n                totalspd += target.getStat('spd', false, true);\n            }\n            if (totaldef && totaldef >= totalspd) {\n                this.boost({ spa: 1 });\n            }\n            else if (totalspd) {\n                this.boost({ atk: 1 });\n            }\n        }",
    "flags": {},
    "name": "Download",
    "rating": 3.5,
    "num": 88
  },
  "dragonsmaw": {
    "onModifyAtkPriority": 5,
    "onModifyAtk": "onModifyAtk(atk, attacker, defender, move) {\n            if (move.type === 'Dragon') {\n                this.debug('Dragon\\'s Maw boost');\n                return this.chainModify(1.5);\n            }\n        }",
    "onModifySpAPriority": 5,
    "onModifySpA": "onModifySpA(atk, attacker, defender, move) {\n            if (move.type === 'Dragon') {\n                this.debug('Dragon\\'s Maw boost');\n                return this.chainModify(1.5);\n            }\n        }",
    "flags": {},
    "name": "Dragon's Maw",
    "rating": 3.5,
    "num": 263
  },
  "drizzle": {
    "onStart": "onStart(source) {\n            if (source.species.id === 'kyogre' && source.item === 'blueorb')\n                return;\n            this.field.setWeather('raindance');\n        }",
    "flags": {},
    "name": "Drizzle",
    "rating": 4,
    "num": 2
  },
  "drought": {
    "onStart": "onStart(source) {\n            if (source.species.id === 'groudon' && source.item === 'redorb')\n                return;\n            this.field.setWeather('sunnyday');\n        }",
    "flags": {},
    "name": "Drought",
    "rating": 4,
    "num": 70
  },
  "dryskin": {
    "onTryHit": "onTryHit(target, source, move) {\n            if (target !== source && move.type === 'Water') {\n                if (!this.heal(target.baseMaxhp / 4)) {\n                    this.add('-immune', target, '[from] ability: Dry Skin');\n                }\n                return null;\n            }\n        }",
    "onSourceBasePowerPriority": 17,
    "onSourceBasePower": "onSourceBasePower(basePower, attacker, defender, move) {\n            if (move.type === 'Fire') {\n                return this.chainModify(1.25);\n            }\n        }",
    "onWeather": "onWeather(target, source, effect) {\n            if (target.hasItem('utilityumbrella'))\n                return;\n            if (effect.id === 'raindance' || effect.id === 'primordialsea') {\n                this.heal(target.baseMaxhp / 8);\n            }\n            else if (effect.id === 'sunnyday' || effect.id === 'desolateland') {\n                this.damage(target.baseMaxhp / 8, target, target);\n            }\n        }",
    "flags": {
      "breakable": 1
    },
    "name": "Dry Skin",
    "rating": 3,
    "num": 87
  },
  "earlybird": {
    "flags": {},
    "name": "Early Bird",
    "rating": 1.5,
    "num": 48
  },
  "eartheater": {
    "onTryHit": "onTryHit(target, source, move) {\n            if (target !== source && move.type === 'Ground') {\n                if (!this.heal(target.baseMaxhp / 4)) {\n                    this.add('-immune', target, '[from] ability: Earth Eater');\n                }\n                return null;\n            }\n        }",
    "flags": {
      "breakable": 1
    },
    "name": "Earth Eater",
    "rating": 3.5,
    "num": 297
  },
  "effectspore": {
    "onDamagingHit": "onDamagingHit(damage, target, source, move) {\n            if (this.checkMoveMakesContact(move, source, target) && !source.status && source.runStatusImmunity('powder')) {\n                const r = this.random(100);\n                if (r < 11) {\n                    source.setStatus('slp', target);\n                }\n                else if (r < 21) {\n                    source.setStatus('par', target);\n                }\n                else if (r < 30) {\n                    source.setStatus('psn', target);\n                }\n            }\n        }",
    "flags": {},
    "name": "Effect Spore",
    "rating": 2,
    "num": 27
  },
  "electricsurge": {
    "onStart": "onStart(source) {\n            this.field.setTerrain('electricterrain');\n        }",
    "flags": {},
    "name": "Electric Surge",
    "rating": 4,
    "num": 226
  },
  "electromorphosis": {
    "onDamagingHitOrder": 1,
    "onDamagingHit": "onDamagingHit(damage, target, source, move) {\n            target.addVolatile('charge');\n        }",
    "flags": {},
    "name": "Electromorphosis",
    "rating": 3,
    "num": 280
  },
  "embodyaspectcornerstone": {
    "onStart": "onStart(pokemon) {\n            if (pokemon.baseSpecies.name === 'Ogerpon-Cornerstone-Tera' && pokemon.terastallized &&\n                this.effectState.embodied !== pokemon.previouslySwitchedIn) {\n                this.effectState.embodied = pokemon.previouslySwitchedIn;\n                this.boost({ def: 1 }, pokemon);\n            }\n        }",
    "flags": {
      "failroleplay": 1,
      "noreceiver": 1,
      "noentrain": 1,
      "notrace": 1,
      "failskillswap": 1,
      "notransform": 1
    },
    "name": "Embody Aspect (Cornerstone)",
    "rating": 3.5,
    "num": 304
  },
  "embodyaspecthearthflame": {
    "onStart": "onStart(pokemon) {\n            if (pokemon.baseSpecies.name === 'Ogerpon-Hearthflame-Tera' && pokemon.terastallized &&\n                this.effectState.embodied !== pokemon.previouslySwitchedIn) {\n                this.effectState.embodied = pokemon.previouslySwitchedIn;\n                this.boost({ atk: 1 }, pokemon);\n            }\n        }",
    "flags": {
      "failroleplay": 1,
      "noreceiver": 1,
      "noentrain": 1,
      "notrace": 1,
      "failskillswap": 1,
      "notransform": 1
    },
    "name": "Embody Aspect (Hearthflame)",
    "rating": 3.5,
    "num": 303
  },
  "embodyaspectteal": {
    "onStart": "onStart(pokemon) {\n            if (pokemon.baseSpecies.name === 'Ogerpon-Teal-Tera' && pokemon.terastallized &&\n                this.effectState.embodied !== pokemon.previouslySwitchedIn) {\n                this.effectState.embodied = pokemon.previouslySwitchedIn;\n                this.boost({ spe: 1 }, pokemon);\n            }\n        }",
    "flags": {
      "failroleplay": 1,
      "noreceiver": 1,
      "noentrain": 1,
      "notrace": 1,
      "failskillswap": 1,
      "notransform": 1
    },
    "name": "Embody Aspect (Teal)",
    "rating": 3.5,
    "num": 301
  },
  "embodyaspectwellspring": {
    "onStart": "onStart(pokemon) {\n            if (pokemon.baseSpecies.name === 'Ogerpon-Wellspring-Tera' && pokemon.terastallized &&\n                this.effectState.embodied !== pokemon.previouslySwitchedIn) {\n                this.effectState.embodied = pokemon.previouslySwitchedIn;\n                this.boost({ spd: 1 }, pokemon);\n            }\n        }",
    "flags": {
      "failroleplay": 1,
      "noreceiver": 1,
      "noentrain": 1,
      "notrace": 1,
      "failskillswap": 1,
      "notransform": 1
    },
    "name": "Embody Aspect (Wellspring)",
    "rating": 3.5,
    "num": 302
  },
  "emergencyexit": {
    "onEmergencyExit": "onEmergencyExit(target) {\n            if (!this.canSwitch(target.side) || target.forceSwitchFlag || target.switchFlag)\n                return;\n            for (const side of this.sides) {\n                for (const active of side.active) {\n                    active.switchFlag = false;\n                }\n            }\n            target.switchFlag = true;\n            this.add('-activate', target, 'ability: Emergency Exit');\n        }",
    "flags": {},
    "name": "Emergency Exit",
    "rating": 1,
    "num": 194
  },
  "fairyaura": {
    "onStart": "onStart(pokemon) {\n            if (this.suppressingAbility(pokemon))\n                return;\n            this.add('-ability', pokemon, 'Fairy Aura');\n        }",
    "onAnyBasePowerPriority": 20,
    "onAnyBasePower": "onAnyBasePower(basePower, source, target, move) {\n            if (target === source || move.category === 'Status' || move.type !== 'Fairy')\n                return;\n            if (!move.auraBooster?.hasAbility('Fairy Aura'))\n                move.auraBooster = this.effectState.target;\n            if (move.auraBooster !== this.effectState.target)\n                return;\n            return this.chainModify([move.hasAuraBreak ? 3072 : 5448, 4096]);\n        }",
    "flags": {},
    "name": "Fairy Aura",
    "rating": 3,
    "num": 187
  },
  "filter": {
    "onSourceModifyDamage": "onSourceModifyDamage(damage, source, target, move) {\n            if (target.getMoveHitData(move).typeMod > 0) {\n                this.debug('Filter neutralize');\n                return this.chainModify(0.75);\n            }\n        }",
    "flags": {
      "breakable": 1
    },
    "name": "Filter",
    "rating": 3,
    "num": 111
  },
  "flamebody": {
    "onDamagingHit": "onDamagingHit(damage, target, source, move) {\n            if (this.checkMoveMakesContact(move, source, target)) {\n                if (this.randomChance(3, 10)) {\n                    source.trySetStatus('brn', target);\n                }\n            }\n        }",
    "flags": {},
    "name": "Flame Body",
    "rating": 2,
    "num": 49
  },
  "flareboost": {
    "onBasePowerPriority": 19,
    "onBasePower": "onBasePower(basePower, attacker, defender, move) {\n            if (attacker.status === 'brn' && move.category === 'Special') {\n                return this.chainModify(1.5);\n            }\n        }",
    "flags": {},
    "name": "Flare Boost",
    "rating": 2,
    "num": 138
  },
  "flashfire": {
    "onTryHit": "onTryHit(target, source, move) {\n            if (target !== source && move.type === 'Fire') {\n                move.accuracy = true;\n                if (!target.addVolatile('flashfire')) {\n                    this.add('-immune', target, '[from] ability: Flash Fire');\n                }\n                return null;\n            }\n        }",
    "onEnd": "onEnd(pokemon) {\n            pokemon.removeVolatile('flashfire');\n        }",
    "condition": {
      "noCopy": true,
      "onStart": "onStart(target) {\n                this.add('-start', target, 'ability: Flash Fire');\n            }",
      "onModifyAtkPriority": 5,
      "onModifyAtk": "onModifyAtk(atk, attacker, defender, move) {\n                if (move.type === 'Fire' && attacker.hasAbility('flashfire')) {\n                    this.debug('Flash Fire boost');\n                    return this.chainModify(1.5);\n                }\n            }",
      "onModifySpAPriority": 5,
      "onModifySpA": "onModifySpA(atk, attacker, defender, move) {\n                if (move.type === 'Fire' && attacker.hasAbility('flashfire')) {\n                    this.debug('Flash Fire boost');\n                    return this.chainModify(1.5);\n                }\n            }",
      "onEnd": "onEnd(target) {\n                this.add('-end', target, 'ability: Flash Fire', '[silent]');\n            }"
    },
    "flags": {
      "breakable": 1
    },
    "name": "Flash Fire",
    "rating": 3.5,
    "num": 18
  },
  "flowergift": {
    "onSwitchInPriority": -2,
    "onStart": "onStart(pokemon) {\n            this.singleEvent('WeatherChange', this.effect, this.effectState, pokemon);\n        }",
    "onWeatherChange": "onWeatherChange(pokemon) {\n            if (!pokemon.isActive || pokemon.baseSpecies.baseSpecies !== 'Cherrim' || pokemon.transformed)\n                return;\n            if (!pokemon.hp)\n                return;\n            if (['sunnyday', 'desolateland'].includes(pokemon.effectiveWeather())) {\n                if (pokemon.species.id !== 'cherrimsunshine') {\n                    pokemon.formeChange('Cherrim-Sunshine', this.effect, false, '0', '[msg]');\n                }\n            }\n            else {\n                if (pokemon.species.id === 'cherrimsunshine') {\n                    pokemon.formeChange('Cherrim', this.effect, false, '0', '[msg]');\n                }\n            }\n        }",
    "onAllyModifyAtkPriority": 3,
    "onAllyModifyAtk": "onAllyModifyAtk(atk, pokemon) {\n            if (this.effectState.target.baseSpecies.baseSpecies !== 'Cherrim')\n                return;\n            if (['sunnyday', 'desolateland'].includes(pokemon.effectiveWeather())) {\n                return this.chainModify(1.5);\n            }\n        }",
    "onAllyModifySpDPriority": 4,
    "onAllyModifySpD": "onAllyModifySpD(spd, pokemon) {\n            if (this.effectState.target.baseSpecies.baseSpecies !== 'Cherrim')\n                return;\n            if (['sunnyday', 'desolateland'].includes(pokemon.effectiveWeather())) {\n                return this.chainModify(1.5);\n            }\n        }",
    "flags": {
      "failroleplay": 1,
      "noreceiver": 1,
      "noentrain": 1,
      "notrace": 1,
      "breakable": 1
    },
    "name": "Flower Gift",
    "rating": 1,
    "num": 122
  },
  "flowerveil": {
    "onAllyTryBoost": "onAllyTryBoost(boost, target, source, effect) {\n            if ((source && target === source) || !target.hasType('Grass'))\n                return;\n            let showMsg = false;\n            let i;\n            for (i in boost) {\n                if (boost[i] < 0) {\n                    delete boost[i];\n                    showMsg = true;\n                }\n            }\n            if (showMsg && !effect.secondaries) {\n                const effectHolder = this.effectState.target;\n                this.add('-block', target, 'ability: Flower Veil', `[of] ${effectHolder}`);\n            }\n        }",
    "onAllySetStatus": "onAllySetStatus(status, target, source, effect) {\n            if (target.hasType('Grass') && source && target !== source && effect && effect.id !== 'yawn') {\n                this.debug('interrupting setStatus with Flower Veil');\n                if (effect.name === 'Synchronize' || (effect.effectType === 'Move' && !effect.secondaries)) {\n                    const effectHolder = this.effectState.target;\n                    this.add('-block', target, 'ability: Flower Veil', `[of] ${effectHolder}`);\n                }\n                return null;\n            }\n        }",
    "onAllyTryAddVolatile": "onAllyTryAddVolatile(status, target) {\n            if (target.hasType('Grass') && status.id === 'yawn') {\n                this.debug('Flower Veil blocking yawn');\n                const effectHolder = this.effectState.target;\n                this.add('-block', target, 'ability: Flower Veil', `[of] ${effectHolder}`);\n                return null;\n            }\n        }",
    "flags": {
      "breakable": 1
    },
    "name": "Flower Veil",
    "rating": 0,
    "num": 166
  },
  "fluffy": {
    "onSourceModifyDamage": "onSourceModifyDamage(damage, source, target, move) {\n            let mod = 1;\n            if (move.type === 'Fire')\n                mod *= 2;\n            if (move.flags['contact'])\n                mod /= 2;\n            return this.chainModify(mod);\n        }",
    "flags": {
      "breakable": 1
    },
    "name": "Fluffy",
    "rating": 3.5,
    "num": 218
  },
  "forecast": {
    "onSwitchInPriority": -2,
    "onStart": "onStart(pokemon) {\n            this.singleEvent('WeatherChange', this.effect, this.effectState, pokemon);\n        }",
    "onWeatherChange": "onWeatherChange(pokemon) {\n            if (pokemon.baseSpecies.baseSpecies !== 'Castform' || pokemon.transformed)\n                return;\n            let forme = null;\n            switch (pokemon.effectiveWeather()) {\n                case 'sunnyday':\n                case 'desolateland':\n                    if (pokemon.species.id !== 'castformsunny')\n                        forme = 'Castform-Sunny';\n                    break;\n                case 'raindance':\n                case 'primordialsea':\n                    if (pokemon.species.id !== 'castformrainy')\n                        forme = 'Castform-Rainy';\n                    break;\n                case 'hail':\n                case 'snowscape':\n                    if (pokemon.species.id !== 'castformsnowy')\n                        forme = 'Castform-Snowy';\n                    break;\n                default:\n                    if (pokemon.species.id !== 'castform')\n                        forme = 'Castform';\n                    break;\n            }\n            if (pokemon.isActive && forme) {\n                pokemon.formeChange(forme, this.effect, false, '0', '[msg]');\n            }\n        }",
    "flags": {
      "failroleplay": 1,
      "noreceiver": 1,
      "noentrain": 1,
      "notrace": 1
    },
    "name": "Forecast",
    "rating": 2,
    "num": 59
  },
  "forewarn": {
    "onStart": "onStart(pokemon) {\n            let warnMoves = [];\n            let warnBp = 1;\n            for (const target of pokemon.foes()) {\n                for (const moveSlot of target.moveSlots) {\n                    const move = this.dex.moves.get(moveSlot.move);\n                    let bp = move.basePower;\n                    if (move.ohko)\n                        bp = 150;\n                    if (move.id === 'counter' || move.id === 'metalburst' || move.id === 'mirrorcoat')\n                        bp = 120;\n                    if (bp === 1)\n                        bp = 80;\n                    if (!bp && move.category !== 'Status')\n                        bp = 80;\n                    if (bp > warnBp) {\n                        warnMoves = [[move, target]];\n                        warnBp = bp;\n                    }\n                    else if (bp === warnBp) {\n                        warnMoves.push([move, target]);\n                    }\n                }\n            }\n            if (!warnMoves.length)\n                return;\n            const [warnMoveName, warnTarget] = this.sample(warnMoves);\n            this.add('-activate', pokemon, 'ability: Forewarn', warnMoveName, `[of] ${warnTarget}`);\n        }",
    "flags": {},
    "name": "Forewarn",
    "rating": 0.5,
    "num": 108
  },
  "friendguard": {
    "onAnyModifyDamage": "onAnyModifyDamage(damage, source, target, move) {\n            if (target !== this.effectState.target && target.isAlly(this.effectState.target)) {\n                this.debug('Friend Guard weaken');\n                return this.chainModify(0.75);\n            }\n        }",
    "flags": {
      "breakable": 1
    },
    "name": "Friend Guard",
    "rating": 0,
    "num": 132
  },
  "frisk": {
    "onStart": "onStart(pokemon) {\n            for (const target of pokemon.foes()) {\n                if (target.item) {\n                    this.add('-item', target, target.getItem().name, '[from] ability: Frisk', `[of] ${pokemon}`);\n                }\n            }\n        }",
    "flags": {},
    "name": "Frisk",
    "rating": 1.5,
    "num": 119
  },
  "fullmetalbody": {
    "onTryBoost": "onTryBoost(boost, target, source, effect) {\n            if (source && target === source)\n                return;\n            let showMsg = false;\n            let i;\n            for (i in boost) {\n                if (boost[i] < 0) {\n                    delete boost[i];\n                    showMsg = true;\n                }\n            }\n            if (showMsg && !effect.secondaries && effect.id !== 'octolock') {\n                this.add(\"-fail\", target, \"unboost\", \"[from] ability: Full Metal Body\", `[of] ${target}`);\n            }\n        }",
    "flags": {},
    "name": "Full Metal Body",
    "rating": 2,
    "num": 230
  },
  "furcoat": {
    "onModifyDefPriority": 6,
    "onModifyDef": "onModifyDef(def) {\n            return this.chainModify(2);\n        }",
    "flags": {
      "breakable": 1
    },
    "name": "Fur Coat",
    "rating": 4,
    "num": 169
  },
  "galewings": {
    "onModifyPriority": "onModifyPriority(priority, pokemon, target, move) {\n            if (move?.type === 'Flying' && pokemon.hp === pokemon.maxhp)\n                return priority + 1;\n        }",
    "flags": {},
    "name": "Gale Wings",
    "rating": 1.5,
    "num": 177
  },
  "galvanize": {
    "onModifyTypePriority": -1,
    "onModifyType": "onModifyType(move, pokemon) {\n            const noModifyType = [\n                'judgment', 'multiattack', 'naturalgift', 'revelationdance', 'technoblast', 'terrainpulse', 'weatherball',\n            ];\n            if (move.type === 'Normal' && (!noModifyType.includes(move.id) || this.activeMove?.isMax) &&\n                !(move.isZ && move.category !== 'Status') && !(move.name === 'Tera Blast' && pokemon.terastallized)) {\n                move.type = 'Electric';\n                move.typeChangerBoosted = this.effect;\n            }\n        }",
    "onBasePowerPriority": 23,
    "onBasePower": "onBasePower(basePower, pokemon, target, move) {\n            if (move.typeChangerBoosted === this.effect)\n                return this.chainModify([4915, 4096]);\n        }",
    "flags": {},
    "name": "Galvanize",
    "rating": 4,
    "num": 206
  },
  "gluttony": {
    "onStart": "onStart(pokemon) {\n            pokemon.abilityState.gluttony = true;\n        }",
    "onDamage": "onDamage(item, pokemon) {\n            pokemon.abilityState.gluttony = true;\n        }",
    "flags": {},
    "name": "Gluttony",
    "rating": 1.5,
    "num": 82
  },
  "goodasgold": {
    "onTryHit": "onTryHit(target, source, move) {\n            if (move.category === 'Status' && target !== source) {\n                this.add('-immune', target, '[from] ability: Good as Gold');\n                return null;\n            }\n        }",
    "flags": {
      "breakable": 1
    },
    "name": "Good as Gold",
    "rating": 5,
    "num": 283
  },
  "gooey": {
    "onDamagingHit": "onDamagingHit(damage, target, source, move) {\n            if (this.checkMoveMakesContact(move, source, target, true)) {\n                this.add('-ability', target, 'Gooey');\n                this.boost({ spe: -1 }, source, target, null, true);\n            }\n        }",
    "flags": {},
    "name": "Gooey",
    "rating": 2,
    "num": 183
  },
  "gorillatactics": {
    "onStart": "onStart(pokemon) {\n            pokemon.abilityState.choiceLock = \"\";\n        }",
    "onBeforeMove": "onBeforeMove(pokemon, target, move) {\n            if (move.isZOrMaxPowered || move.id === 'struggle')\n                return;\n            if (pokemon.abilityState.choiceLock && pokemon.abilityState.choiceLock !== move.id) {\n                // Fails unless ability is being ignored (these events will not run), no PP lost.\n                this.addMove('move', pokemon, move.name);\n                this.attrLastMove('[still]');\n                this.debug(\"Disabled by Gorilla Tactics\");\n                this.add('-fail', pokemon);\n                return false;\n            }\n        }",
    "onModifyMove": "onModifyMove(move, pokemon) {\n            if (pokemon.abilityState.choiceLock || move.isZOrMaxPowered || move.id === 'struggle')\n                return;\n            pokemon.abilityState.choiceLock = move.id;\n        }",
    "onModifyAtkPriority": 1,
    "onModifyAtk": "onModifyAtk(atk, pokemon) {\n            if (pokemon.volatiles['dynamax'])\n                return;\n            // PLACEHOLDER\n            this.debug('Gorilla Tactics Atk Boost');\n            return this.chainModify(1.5);\n        }",
    "onDisableMove": "onDisableMove(pokemon) {\n            if (!pokemon.abilityState.choiceLock)\n                return;\n            if (pokemon.volatiles['dynamax'])\n                return;\n            for (const moveSlot of pokemon.moveSlots) {\n                if (moveSlot.id !== pokemon.abilityState.choiceLock) {\n                    pokemon.disableMove(moveSlot.id, false, this.effectState.sourceEffect);\n                }\n            }\n        }",
    "onEnd": "onEnd(pokemon) {\n            pokemon.abilityState.choiceLock = \"\";\n        }",
    "flags": {},
    "name": "Gorilla Tactics",
    "rating": 4.5,
    "num": 255
  },
  "grasspelt": {
    "onModifyDefPriority": 6,
    "onModifyDef": "onModifyDef(pokemon) {\n            if (this.field.isTerrain('grassyterrain'))\n                return this.chainModify(1.5);\n        }",
    "flags": {
      "breakable": 1
    },
    "name": "Grass Pelt",
    "rating": 0.5,
    "num": 179
  },
  "grassysurge": {
    "onStart": "onStart(source) {\n            this.field.setTerrain('grassyterrain');\n        }",
    "flags": {},
    "name": "Grassy Surge",
    "rating": 4,
    "num": 229
  },
  "grimneigh": {
    "onSourceAfterFaint": "onSourceAfterFaint(length, target, source, effect) {\n            if (effect && effect.effectType === 'Move') {\n                this.boost({ spa: length }, source);\n            }\n        }",
    "flags": {},
    "name": "Grim Neigh",
    "rating": 3,
    "num": 265
  },
  "guarddog": {
    "onDragOutPriority": 1,
    "onDragOut": "onDragOut(pokemon) {\n            this.add('-activate', pokemon, 'ability: Guard Dog');\n            return null;\n        }",
    "onTryBoostPriority": 2,
    "onTryBoost": "onTryBoost(boost, target, source, effect) {\n            if (effect.name === 'Intimidate' && boost.atk) {\n                delete boost.atk;\n                this.boost({ atk: 1 }, target, target, null, false, true);\n            }\n        }",
    "flags": {
      "breakable": 1
    },
    "name": "Guard Dog",
    "rating": 2,
    "num": 275
  },
  "gulpmissile": {
    "onDamagingHit": "onDamagingHit(damage, target, source, move) {\n            if (!source.hp || !source.isActive || target.isSemiInvulnerable())\n                return;\n            if (['cramorantgulping', 'cramorantgorging'].includes(target.species.id)) {\n                this.damage(source.baseMaxhp / 4, source, target);\n                if (target.species.id === 'cramorantgulping') {\n                    this.boost({ def: -1 }, source, target, null, true);\n                }\n                else {\n                    source.trySetStatus('par', target, move);\n                }\n                target.formeChange('cramorant', move);\n            }\n        }",
    "onSourceTryPrimaryHit": "onSourceTryPrimaryHit(target, source, effect) {\n            if (effect?.id === 'surf' && source.hasAbility('gulpmissile') && source.species.name === 'Cramorant') {\n                const forme = source.hp <= source.maxhp / 2 ? 'cramorantgorging' : 'cramorantgulping';\n                source.formeChange(forme, effect);\n            }\n        }",
    "flags": {
      "cantsuppress": 1,
      "notransform": 1
    },
    "name": "Gulp Missile",
    "rating": 2.5,
    "num": 241
  },
  "guts": {
    "onModifyAtkPriority": 5,
    "onModifyAtk": "onModifyAtk(atk, pokemon) {\n            if (pokemon.status) {\n                return this.chainModify(1.5);\n            }\n        }",
    "flags": {},
    "name": "Guts",
    "rating": 3.5,
    "num": 62
  },
  "hadronengine": {
    "onStart": "onStart(pokemon) {\n            if (!this.field.setTerrain('electricterrain') && this.field.isTerrain('electricterrain')) {\n                this.add('-activate', pokemon, 'ability: Hadron Engine');\n            }\n        }",
    "onModifySpAPriority": 5,
    "onModifySpA": "onModifySpA(atk, attacker, defender, move) {\n            if (this.field.isTerrain('electricterrain')) {\n                this.debug('Hadron Engine boost');\n                return this.chainModify([5461, 4096]);\n            }\n        }",
    "flags": {},
    "name": "Hadron Engine",
    "rating": 4.5,
    "num": 289
  },
  "harvest": {
    "onResidualOrder": 28,
    "onResidualSubOrder": 2,
    "onResidual": "onResidual(pokemon) {\n            if (this.field.isWeather(['sunnyday', 'desolateland']) || this.randomChance(1, 2)) {\n                if (pokemon.hp && !pokemon.item && this.dex.items.get(pokemon.lastItem).isBerry) {\n                    pokemon.setItem(pokemon.lastItem);\n                    pokemon.lastItem = '';\n                    this.add('-item', pokemon, pokemon.getItem(), '[from] ability: Harvest');\n                }\n            }\n        }",
    "flags": {},
    "name": "Harvest",
    "rating": 2.5,
    "num": 139
  },
  "healer": {
    "onResidualOrder": 5,
    "onResidualSubOrder": 3,
    "onResidual": "onResidual(pokemon) {\n            for (const allyActive of pokemon.adjacentAllies()) {\n                if (allyActive.status && this.randomChance(3, 10)) {\n                    this.add('-activate', pokemon, 'ability: Healer');\n                    allyActive.cureStatus();\n                }\n            }\n        }",
    "flags": {},
    "name": "Healer",
    "rating": 0,
    "num": 131
  },
  "heatproof": {
    "onSourceModifyAtkPriority": 6,
    "onSourceModifyAtk": "onSourceModifyAtk(atk, attacker, defender, move) {\n            if (move.type === 'Fire') {\n                this.debug('Heatproof Atk weaken');\n                return this.chainModify(0.5);\n            }\n        }",
    "onSourceModifySpAPriority": 5,
    "onSourceModifySpA": "onSourceModifySpA(atk, attacker, defender, move) {\n            if (move.type === 'Fire') {\n                this.debug('Heatproof SpA weaken');\n                return this.chainModify(0.5);\n            }\n        }",
    "onDamage": "onDamage(damage, target, source, effect) {\n            if (effect && effect.id === 'brn') {\n                return damage / 2;\n            }\n        }",
    "flags": {
      "breakable": 1
    },
    "name": "Heatproof",
    "rating": 2,
    "num": 85
  },
  "heavymetal": {
    "onModifyWeightPriority": 1,
    "onModifyWeight": "onModifyWeight(weighthg) {\n            return weighthg * 2;\n        }",
    "flags": {
      "breakable": 1
    },
    "name": "Heavy Metal",
    "rating": 0,
    "num": 134
  },
  "honeygather": {
    "flags": {},
    "name": "Honey Gather",
    "rating": 0,
    "num": 118
  },
  "hospitality": {
    "onSwitchInPriority": -2,
    "onStart": "onStart(pokemon) {\n            for (const ally of pokemon.adjacentAllies()) {\n                this.heal(ally.baseMaxhp / 4, ally, pokemon);\n            }\n        }",
    "flags": {},
    "name": "Hospitality",
    "rating": 0,
    "num": 299
  },
  "hugepower": {
    "onModifyAtkPriority": 5,
    "onModifyAtk": "onModifyAtk(atk) {\n            return this.chainModify(2);\n        }",
    "flags": {},
    "name": "Huge Power",
    "rating": 5,
    "num": 37
  },
  "hungerswitch": {
    "onResidualOrder": 29,
    "onResidual": "onResidual(pokemon) {\n            if (pokemon.species.baseSpecies !== 'Morpeko' || pokemon.terastallized)\n                return;\n            const targetForme = pokemon.species.name === 'Morpeko' ? 'Morpeko-Hangry' : 'Morpeko';\n            pokemon.formeChange(targetForme);\n        }",
    "flags": {
      "failroleplay": 1,
      "noreceiver": 1,
      "noentrain": 1,
      "notrace": 1,
      "failskillswap": 1,
      "notransform": 1
    },
    "name": "Hunger Switch",
    "rating": 1,
    "num": 258
  },
  "hustle": {
    "onModifyAtkPriority": 5,
    "onModifyAtk": "onModifyAtk(atk) {\n            return this.modify(atk, 1.5);\n        }",
    "onSourceModifyAccuracyPriority": -1,
    "onSourceModifyAccuracy": "onSourceModifyAccuracy(accuracy, target, source, move) {\n            if (move.category === 'Physical' && typeof accuracy === 'number') {\n                return this.chainModify([3277, 4096]);\n            }\n        }",
    "flags": {},
    "name": "Hustle",
    "rating": 3.5,
    "num": 55
  },
  "hydration": {
    "onResidualOrder": 5,
    "onResidualSubOrder": 3,
    "onResidual": "onResidual(pokemon) {\n            if (pokemon.status && ['raindance', 'primordialsea'].includes(pokemon.effectiveWeather())) {\n                this.debug('hydration');\n                this.add('-activate', pokemon, 'ability: Hydration');\n                pokemon.cureStatus();\n            }\n        }",
    "flags": {},
    "name": "Hydration",
    "rating": 1.5,
    "num": 93
  },
  "hypercutter": {
    "onTryBoost": "onTryBoost(boost, target, source, effect) {\n            if (source && target === source)\n                return;\n            if (boost.atk && boost.atk < 0) {\n                delete boost.atk;\n                if (!effect.secondaries) {\n                    this.add(\"-fail\", target, \"unboost\", \"Attack\", \"[from] ability: Hyper Cutter\", `[of] ${target}`);\n                }\n            }\n        }",
    "flags": {
      "breakable": 1
    },
    "name": "Hyper Cutter",
    "rating": 1.5,
    "num": 52
  },
  "icebody": {
    "onWeather": "onWeather(target, source, effect) {\n            if (effect.id === 'hail' || effect.id === 'snowscape') {\n                this.heal(target.baseMaxhp / 16);\n            }\n        }",
    "onImmunity": "onImmunity(type, pokemon) {\n            if (type === 'hail')\n                return false;\n        }",
    "flags": {},
    "name": "Ice Body",
    "rating": 1,
    "num": 115
  },
  "iceface": {
    "onSwitchInPriority": -2,
    "onStart": "onStart(pokemon) {\n            if (this.field.isWeather(['hail', 'snowscape']) && pokemon.species.id === 'eiscuenoice') {\n                this.add('-activate', pokemon, 'ability: Ice Face');\n                this.effectState.busted = false;\n                pokemon.formeChange('Eiscue', this.effect, true);\n            }\n        }",
    "onDamagePriority": 1,
    "onDamage": "onDamage(damage, target, source, effect) {\n            if (effect?.effectType === 'Move' && effect.category === 'Physical' && target.species.id === 'eiscue') {\n                this.add('-activate', target, 'ability: Ice Face');\n                this.effectState.busted = true;\n                return 0;\n            }\n        }",
    "onCriticalHit": "onCriticalHit(target, type, move) {\n            if (!target)\n                return;\n            if (move.category !== 'Physical' || target.species.id !== 'eiscue')\n                return;\n            if (target.volatiles['substitute'] && !(move.flags['bypasssub'] || move.infiltrates))\n                return;\n            if (!target.runImmunity(move))\n                return;\n            return false;\n        }",
    "onEffectiveness": "onEffectiveness(typeMod, target, type, move) {\n            if (!target)\n                return;\n            if (move.category !== 'Physical' || target.species.id !== 'eiscue')\n                return;\n            const hitSub = target.volatiles['substitute'] && !move.flags['bypasssub'] && !(move.infiltrates && this.gen >= 6);\n            if (hitSub)\n                return;\n            if (!target.runImmunity(move))\n                return;\n            return 0;\n        }",
    "onUpdate": "onUpdate(pokemon) {\n            if (pokemon.species.id === 'eiscue' && this.effectState.busted) {\n                pokemon.formeChange('Eiscue-Noice', this.effect, true);\n            }\n        }",
    "onWeatherChange": "onWeatherChange(pokemon, source, sourceEffect) {\n            // snow/hail resuming because Cloud Nine/Air Lock ended does not trigger Ice Face\n            if (sourceEffect?.suppressWeather)\n                return;\n            if (!pokemon.hp)\n                return;\n            if (this.field.isWeather(['hail', 'snowscape']) && pokemon.species.id === 'eiscuenoice') {\n                this.add('-activate', pokemon, 'ability: Ice Face');\n                this.effectState.busted = false;\n                pokemon.formeChange('Eiscue', this.effect, true);\n            }\n        }",
    "flags": {
      "failroleplay": 1,
      "noreceiver": 1,
      "noentrain": 1,
      "notrace": 1,
      "failskillswap": 1,
      "cantsuppress": 1,
      "breakable": 1,
      "notransform": 1
    },
    "name": "Ice Face",
    "rating": 3,
    "num": 248
  },
  "icescales": {
    "onSourceModifyDamage": "onSourceModifyDamage(damage, source, target, move) {\n            if (move.category === 'Special') {\n                return this.chainModify(0.5);\n            }\n        }",
    "flags": {
      "breakable": 1
    },
    "name": "Ice Scales",
    "rating": 4,
    "num": 246
  },
  "illuminate": {
    "onTryBoost": "onTryBoost(boost, target, source, effect) {\n            if (source && target === source)\n                return;\n            if (boost.accuracy && boost.accuracy < 0) {\n                delete boost.accuracy;\n                if (!effect.secondaries) {\n                    this.add(\"-fail\", target, \"unboost\", \"accuracy\", \"[from] ability: Illuminate\", `[of] ${target}`);\n                }\n            }\n        }",
    "onModifyMove": "onModifyMove(move) {\n            move.ignoreEvasion = true;\n        }",
    "flags": {
      "breakable": 1
    },
    "name": "Illuminate",
    "rating": 0.5,
    "num": 35
  },
  "illusion": {
    "onBeforeSwitchIn": "onBeforeSwitchIn(pokemon) {\n            pokemon.illusion = null;\n            // yes, you can Illusion an active pokemon but only if it's to your right\n            for (let i = pokemon.side.pokemon.length - 1; i > pokemon.position; i--) {\n                const possibleTarget = pokemon.side.pokemon[i];\n                if (!possibleTarget.fainted) {\n                    // If Ogerpon is in the last slot while the Illusion Pokemon is Terastallized\n                    // Illusion will not disguise as anything\n                    if (!pokemon.terastallized || !['Ogerpon', 'Terapagos'].includes(possibleTarget.species.baseSpecies)) {\n                        pokemon.illusion = possibleTarget;\n                    }\n                    break;\n                }\n            }\n        }",
    "onDamagingHit": "onDamagingHit(damage, target, source, move) {\n            if (target.illusion) {\n                this.singleEvent('End', this.dex.abilities.get('Illusion'), target.abilityState, target, source, move);\n            }\n        }",
    "onEnd": "onEnd(pokemon) {\n            if (pokemon.illusion) {\n                this.debug('illusion cleared');\n                pokemon.illusion = null;\n                const details = pokemon.getUpdatedDetails();\n                this.add('replace', pokemon, details);\n                this.add('-end', pokemon, 'Illusion');\n                if (this.ruleTable.has('illusionlevelmod')) {\n                    this.hint(\"Illusion Level Mod is active, so this Pok\\u00e9mon's true level was hidden.\", true);\n                }\n            }\n        }",
    "onFaint": "onFaint(pokemon) {\n            pokemon.illusion = null;\n        }",
    "flags": {
      "failroleplay": 1,
      "noreceiver": 1,
      "noentrain": 1,
      "notrace": 1,
      "failskillswap": 1
    },
    "name": "Illusion",
    "rating": 4.5,
    "num": 149
  },
  "immunity": {
    "onUpdate": "onUpdate(pokemon) {\n            if (pokemon.status === 'psn' || pokemon.status === 'tox') {\n                this.add('-activate', pokemon, 'ability: Immunity');\n                pokemon.cureStatus();\n            }\n        }",
    "onSetStatus": "onSetStatus(status, target, source, effect) {\n            if (status.id !== 'psn' && status.id !== 'tox')\n                return;\n            if (effect?.status) {\n                this.add('-immune', target, '[from] ability: Immunity');\n            }\n            return false;\n        }",
    "flags": {
      "breakable": 1
    },
    "name": "Immunity",
    "rating": 2,
    "num": 17
  },
  "imposter": {
    "onSwitchIn": "onSwitchIn(pokemon) {\n            // Imposter does not activate when Skill Swapped or when Neutralizing Gas leaves the field\n            // Imposter copies across in doubles/triples\n            // (also copies across in multibattle and diagonally in free-for-all,\n            // but side.foe already takes care of those)\n            const target = pokemon.side.foe.active[pokemon.side.foe.active.length - 1 - pokemon.position];\n            if (target) {\n                pokemon.transformInto(target, this.dex.abilities.get('imposter'));\n            }\n        }",
    "flags": {
      "failroleplay": 1,
      "noreceiver": 1,
      "noentrain": 1,
      "notrace": 1
    },
    "name": "Imposter",
    "rating": 5,
    "num": 150
  },
  "infiltrator": {
    "onModifyMove": "onModifyMove(move) {\n            move.infiltrates = true;\n        }",
    "flags": {},
    "name": "Infiltrator",
    "rating": 2.5,
    "num": 151
  },
  "innardsout": {
    "onDamagingHitOrder": 1,
    "onDamagingHit": "onDamagingHit(damage, target, source, move) {\n            if (!target.hp) {\n                this.damage(target.getUndynamaxedHP(damage), source, target);\n            }\n        }",
    "flags": {},
    "name": "Innards Out",
    "rating": 4,
    "num": 215
  },
  "innerfocus": {
    "onTryAddVolatile": "onTryAddVolatile(status, pokemon) {\n            if (status.id === 'flinch')\n                return null;\n        }",
    "onTryBoost": "onTryBoost(boost, target, source, effect) {\n            if (effect.name === 'Intimidate' && boost.atk) {\n                delete boost.atk;\n                this.add('-fail', target, 'unboost', 'Attack', '[from] ability: Inner Focus', `[of] ${target}`);\n            }\n        }",
    "flags": {
      "breakable": 1
    },
    "name": "Inner Focus",
    "rating": 1,
    "num": 39
  },
  "insomnia": {
    "onUpdate": "onUpdate(pokemon) {\n            if (pokemon.status === 'slp') {\n                this.add('-activate', pokemon, 'ability: Insomnia');\n                pokemon.cureStatus();\n            }\n        }",
    "onSetStatus": "onSetStatus(status, target, source, effect) {\n            if (status.id !== 'slp')\n                return;\n            if (effect?.status) {\n                this.add('-immune', target, '[from] ability: Insomnia');\n            }\n            return false;\n        }",
    "onTryAddVolatile": "onTryAddVolatile(status, target) {\n            if (status.id === 'yawn') {\n                this.add('-immune', target, '[from] ability: Insomnia');\n                return null;\n            }\n        }",
    "flags": {
      "breakable": 1
    },
    "name": "Insomnia",
    "rating": 1.5,
    "num": 15
  },
  "intimidate": {
    "onStart": "onStart(pokemon) {\n            let activated = false;\n            for (const target of pokemon.adjacentFoes()) {\n                if (!activated) {\n                    this.add('-ability', pokemon, 'Intimidate', 'boost');\n                    activated = true;\n                }\n                if (target.volatiles['substitute']) {\n                    this.add('-immune', target);\n                }\n                else {\n                    this.boost({ atk: -1 }, target, pokemon, null, true);\n                }\n            }\n        }",
    "flags": {},
    "name": "Intimidate",
    "rating": 3.5,
    "num": 22
  },
  "intrepidsword": {
    "onStart": "onStart(pokemon) {\n            if (pokemon.swordBoost)\n                return;\n            pokemon.swordBoost = true;\n            this.boost({ atk: 1 }, pokemon);\n        }",
    "flags": {},
    "name": "Intrepid Sword",
    "rating": 4,
    "num": 234
  },
  "ironbarbs": {
    "onDamagingHitOrder": 1,
    "onDamagingHit": "onDamagingHit(damage, target, source, move) {\n            if (this.checkMoveMakesContact(move, source, target, true)) {\n                this.damage(source.baseMaxhp / 8, source, target);\n            }\n        }",
    "flags": {},
    "name": "Iron Barbs",
    "rating": 2.5,
    "num": 160
  },
  "ironfist": {
    "onBasePowerPriority": 23,
    "onBasePower": "onBasePower(basePower, attacker, defender, move) {\n            if (move.flags['punch']) {\n                this.debug('Iron Fist boost');\n                return this.chainModify([4915, 4096]);\n            }\n        }",
    "flags": {},
    "name": "Iron Fist",
    "rating": 3,
    "num": 89
  },
  "justified": {
    "onDamagingHit": "onDamagingHit(damage, target, source, move) {\n            if (move.type === 'Dark') {\n                this.boost({ atk: 1 });\n            }\n        }",
    "flags": {},
    "name": "Justified",
    "rating": 2.5,
    "num": 154
  },
  "keeneye": {
    "onTryBoost": "onTryBoost(boost, target, source, effect) {\n            if (source && target === source)\n                return;\n            if (boost.accuracy && boost.accuracy < 0) {\n                delete boost.accuracy;\n                if (!effect.secondaries) {\n                    this.add(\"-fail\", target, \"unboost\", \"accuracy\", \"[from] ability: Keen Eye\", `[of] ${target}`);\n                }\n            }\n        }",
    "onModifyMove": "onModifyMove(move) {\n            move.ignoreEvasion = true;\n        }",
    "flags": {
      "breakable": 1
    },
    "name": "Keen Eye",
    "rating": 0.5,
    "num": 51
  },
  "klutz": {
    "onSwitchInPriority": 1,
    "onStart": "onStart(pokemon) {\n            this.singleEvent('End', pokemon.getItem(), pokemon.itemState, pokemon);\n        }",
    "flags": {},
    "name": "Klutz",
    "rating": -1,
    "num": 103
  },
  "leafguard": {
    "onSetStatus": "onSetStatus(status, target, source, effect) {\n            if (['sunnyday', 'desolateland'].includes(target.effectiveWeather())) {\n                if (effect?.status) {\n                    this.add('-immune', target, '[from] ability: Leaf Guard');\n                }\n                return false;\n            }\n        }",
    "onTryAddVolatile": "onTryAddVolatile(status, target) {\n            if (status.id === 'yawn' && ['sunnyday', 'desolateland'].includes(target.effectiveWeather())) {\n                this.add('-immune', target, '[from] ability: Leaf Guard');\n                return null;\n            }\n        }",
    "flags": {
      "breakable": 1
    },
    "name": "Leaf Guard",
    "rating": 0.5,
    "num": 102
  },
  "levitate": {
    "flags": {
      "breakable": 1
    },
    "name": "Levitate",
    "rating": 3.5,
    "num": 26
  },
  "libero": {
    "onPrepareHit": "onPrepareHit(source, target, move) {\n            if (this.effectState.libero === source.previouslySwitchedIn)\n                return;\n            if (move.hasBounced || move.flags['futuremove'] || move.sourceEffect === 'snatch' || move.callsMove)\n                return;\n            const type = move.type;\n            if (type && type !== '???' && source.getTypes().join() !== type) {\n                if (!source.setType(type))\n                    return;\n                this.effectState.libero = source.previouslySwitchedIn;\n                this.add('-start', source, 'typechange', type, '[from] ability: Libero');\n            }\n        }",
    "flags": {},
    "name": "Libero",
    "rating": 4,
    "num": 236
  },
  "lightmetal": {
    "onModifyWeight": "onModifyWeight(weighthg) {\n            return this.trunc(weighthg / 2);\n        }",
    "flags": {
      "breakable": 1
    },
    "name": "Light Metal",
    "rating": 1,
    "num": 135
  },
  "lightningrod": {
    "onTryHit": "onTryHit(target, source, move) {\n            if (target !== source && move.type === 'Electric') {\n                if (!this.boost({ spa: 1 })) {\n                    this.add('-immune', target, '[from] ability: Lightning Rod');\n                }\n                return null;\n            }\n        }",
    "onAnyRedirectTarget": "onAnyRedirectTarget(target, source, source2, move) {\n            if (move.type !== 'Electric' || move.flags['pledgecombo'])\n                return;\n            const redirectTarget = ['randomNormal', 'adjacentFoe'].includes(move.target) ? 'normal' : move.target;\n            if (this.validTarget(this.effectState.target, source, redirectTarget)) {\n                if (move.smartTarget)\n                    move.smartTarget = false;\n                if (this.effectState.target !== target) {\n                    this.add('-activate', this.effectState.target, 'ability: Lightning Rod');\n                }\n                return this.effectState.target;\n            }\n        }",
    "flags": {
      "breakable": 1
    },
    "name": "Lightning Rod",
    "rating": 3,
    "num": 31
  },
  "limber": {
    "onUpdate": "onUpdate(pokemon) {\n            if (pokemon.status === 'par') {\n                this.add('-activate', pokemon, 'ability: Limber');\n                pokemon.cureStatus();\n            }\n        }",
    "onSetStatus": "onSetStatus(status, target, source, effect) {\n            if (status.id !== 'par')\n                return;\n            if (effect?.status) {\n                this.add('-immune', target, '[from] ability: Limber');\n            }\n            return false;\n        }",
    "flags": {
      "breakable": 1
    },
    "name": "Limber",
    "rating": 2,
    "num": 7
  },
  "lingeringaroma": {
    "onDamagingHit": "onDamagingHit(damage, target, source, move) {\n            const sourceAbility = source.getAbility();\n            if (sourceAbility.flags['cantsuppress'] || sourceAbility.id === 'lingeringaroma') {\n                return;\n            }\n            if (this.checkMoveMakesContact(move, source, target, !source.isAlly(target))) {\n                const oldAbility = source.setAbility('lingeringaroma', target);\n                if (oldAbility) {\n                    this.add('-activate', target, 'ability: Lingering Aroma', this.dex.abilities.get(oldAbility).name, `[of] ${source}`);\n                }\n            }\n        }",
    "flags": {},
    "name": "Lingering Aroma",
    "rating": 2,
    "num": 268
  },
  "liquidooze": {
    "onSourceTryHeal": "onSourceTryHeal(damage, target, source, effect) {\n            this.debug(`Heal is occurring: ${target} <- ${source} :: ${effect.id}`);\n            const canOoze = ['drain', 'leechseed', 'strengthsap'];\n            if (canOoze.includes(effect.id)) {\n                this.damage(damage);\n                return 0;\n            }\n        }",
    "flags": {},
    "name": "Liquid Ooze",
    "rating": 2.5,
    "num": 64
  },
  "liquidvoice": {
    "onModifyTypePriority": -1,
    "onModifyType": "onModifyType(move, pokemon) {\n            if (move.flags['sound'] && !pokemon.volatiles['dynamax']) { // hardcode\n                move.type = 'Water';\n            }\n        }",
    "flags": {},
    "name": "Liquid Voice",
    "rating": 1.5,
    "num": 204
  },
  "longreach": {
    "onModifyMove": "onModifyMove(move) {\n            delete move.flags['contact'];\n        }",
    "flags": {},
    "name": "Long Reach",
    "rating": 1,
    "num": 203
  },
  "magicbounce": {
    "onTryHitPriority": 1,
    "onTryHit": "onTryHit(target, source, move) {\n            if (target === source || move.hasBounced || !move.flags['reflectable'] || target.isSemiInvulnerable()) {\n                return;\n            }\n            const newMove = this.dex.getActiveMove(move.id);\n            newMove.hasBounced = true;\n            newMove.pranksterBoosted = false;\n            this.actions.useMove(newMove, target, { target: source });\n            return null;\n        }",
    "onAllyTryHitSide": "onAllyTryHitSide(target, source, move) {\n            if (target.isAlly(source) || move.hasBounced || !move.flags['reflectable'] || target.isSemiInvulnerable()) {\n                return;\n            }\n            const newMove = this.dex.getActiveMove(move.id);\n            newMove.hasBounced = true;\n            newMove.pranksterBoosted = false;\n            this.actions.useMove(newMove, this.effectState.target, { target: source });\n            move.hasBounced = true; // only bounce once in free-for-all battles\n            return null;\n        }",
    "flags": {
      "breakable": 1
    },
    "name": "Magic Bounce",
    "rating": 4,
    "num": 156
  },
  "magicguard": {
    "onDamage": "onDamage(damage, target, source, effect) {\n            if (effect.effectType !== 'Move') {\n                if (effect.effectType === 'Ability')\n                    this.add('-activate', source, 'ability: ' + effect.name);\n                return false;\n            }\n        }",
    "flags": {},
    "name": "Magic Guard",
    "rating": 4,
    "num": 98
  },
  "magician": {
    "onAfterMoveSecondarySelf": "onAfterMoveSecondarySelf(source, target, move) {\n            if (!move || source.switchFlag === true || !move.hitTargets || source.item || source.volatiles['gem'] ||\n                move.id === 'fling' || move.category === 'Status')\n                return;\n            const hitTargets = move.hitTargets;\n            this.speedSort(hitTargets);\n            for (const pokemon of hitTargets) {\n                if (pokemon !== source) {\n                    const yourItem = pokemon.takeItem(source);\n                    if (!yourItem)\n                        continue;\n                    if (!source.setItem(yourItem)) {\n                        pokemon.item = yourItem.id; // bypass setItem so we don't break choicelock or anything\n                        continue;\n                    }\n                    this.add('-item', source, yourItem, '[from] ability: Magician', `[of] ${pokemon}`);\n                    return;\n                }\n            }\n        }",
    "flags": {},
    "name": "Magician",
    "rating": 1,
    "num": 170
  },
  "magmaarmor": {
    "onUpdate": "onUpdate(pokemon) {\n            if (pokemon.status === 'frz') {\n                this.add('-activate', pokemon, 'ability: Magma Armor');\n                pokemon.cureStatus();\n            }\n        }",
    "onImmunity": "onImmunity(type, pokemon) {\n            if (type === 'frz')\n                return false;\n        }",
    "flags": {
      "breakable": 1
    },
    "name": "Magma Armor",
    "rating": 0.5,
    "num": 40
  },
  "magnetpull": {
    "onFoeTrapPokemon": "onFoeTrapPokemon(pokemon) {\n            if (pokemon.hasType('Steel') && pokemon.isAdjacent(this.effectState.target)) {\n                pokemon.tryTrap(true);\n            }\n        }",
    "onFoeMaybeTrapPokemon": "onFoeMaybeTrapPokemon(pokemon, source) {\n            if (!source)\n                source = this.effectState.target;\n            if (!source || !pokemon.isAdjacent(source))\n                return;\n            if (!pokemon.knownType || pokemon.hasType('Steel')) {\n                pokemon.maybeTrapped = true;\n            }\n        }",
    "flags": {},
    "name": "Magnet Pull",
    "rating": 4,
    "num": 42
  },
  "marvelscale": {
    "onModifyDefPriority": 6,
    "onModifyDef": "onModifyDef(def, pokemon) {\n            if (pokemon.status) {\n                return this.chainModify(1.5);\n            }\n        }",
    "flags": {
      "breakable": 1
    },
    "name": "Marvel Scale",
    "rating": 2.5,
    "num": 63
  },
  "megalauncher": {
    "onBasePowerPriority": 19,
    "onBasePower": "onBasePower(basePower, attacker, defender, move) {\n            if (move.flags['pulse']) {\n                return this.chainModify(1.5);\n            }\n        }",
    "flags": {},
    "name": "Mega Launcher",
    "rating": 3,
    "num": 178
  },
  "merciless": {
    "onModifyCritRatio": "onModifyCritRatio(critRatio, source, target) {\n            if (target && ['psn', 'tox'].includes(target.status))\n                return 5;\n        }",
    "flags": {},
    "name": "Merciless",
    "rating": 1.5,
    "num": 196
  },
  "mimicry": {
    "onSwitchInPriority": -1,
    "onStart": "onStart(pokemon) {\n            this.singleEvent('TerrainChange', this.effect, this.effectState, pokemon);\n        }",
    "onTerrainChange": "onTerrainChange(pokemon) {\n            let types;\n            switch (this.field.terrain) {\n                case 'electricterrain':\n                    types = ['Electric'];\n                    break;\n                case 'grassyterrain':\n                    types = ['Grass'];\n                    break;\n                case 'mistyterrain':\n                    types = ['Fairy'];\n                    break;\n                case 'psychicterrain':\n                    types = ['Psychic'];\n                    break;\n                default:\n                    types = pokemon.baseSpecies.types;\n            }\n            const oldTypes = pokemon.getTypes();\n            if (oldTypes.join() === types.join() || !pokemon.setType(types))\n                return;\n            if (this.field.terrain || pokemon.transformed) {\n                this.add('-start', pokemon, 'typechange', types.join('/'), '[from] ability: Mimicry');\n                if (!this.field.terrain)\n                    this.hint(\"Transform Mimicry changes you to your original un-transformed types.\");\n            }\n            else {\n                this.add('-activate', pokemon, 'ability: Mimicry');\n                this.add('-end', pokemon, 'typechange', '[silent]');\n            }\n        }",
    "flags": {},
    "name": "Mimicry",
    "rating": 0,
    "num": 250
  },
  "mindseye": {
    "onTryBoost": "onTryBoost(boost, target, source, effect) {\n            if (source && target === source)\n                return;\n            if (boost.accuracy && boost.accuracy < 0) {\n                delete boost.accuracy;\n                if (!effect.secondaries) {\n                    this.add(\"-fail\", target, \"unboost\", \"accuracy\", \"[from] ability: Mind's Eye\", `[of] ${target}`);\n                }\n            }\n        }",
    "onModifyMovePriority": -5,
    "onModifyMove": "onModifyMove(move) {\n            move.ignoreEvasion = true;\n            if (!move.ignoreImmunity)\n                move.ignoreImmunity = {};\n            if (move.ignoreImmunity !== true) {\n                move.ignoreImmunity['Fighting'] = true;\n                move.ignoreImmunity['Normal'] = true;\n            }\n        }",
    "flags": {
      "breakable": 1
    },
    "name": "Mind's Eye",
    "rating": 0,
    "num": 300
  },
  "minus": {
    "onModifySpAPriority": 5,
    "onModifySpA": "onModifySpA(spa, pokemon) {\n            for (const allyActive of pokemon.allies()) {\n                if (allyActive.hasAbility(['minus', 'plus'])) {\n                    return this.chainModify(1.5);\n                }\n            }\n        }",
    "flags": {},
    "name": "Minus",
    "rating": 0,
    "num": 58
  },
  "mirrorarmor": {
    "onTryBoost": "onTryBoost(boost, target, source, effect) {\n            // Don't bounce self stat changes, or boosts that have already bounced\n            if (!source || target === source || !boost || effect.name === 'Mirror Armor')\n                return;\n            let b;\n            for (b in boost) {\n                if (boost[b] < 0) {\n                    if (target.boosts[b] === -6)\n                        continue;\n                    const negativeBoost = {};\n                    negativeBoost[b] = boost[b];\n                    delete boost[b];\n                    if (source.hp) {\n                        this.add('-ability', target, 'Mirror Armor');\n                        this.boost(negativeBoost, source, target, null, true);\n                    }\n                }\n            }\n        }",
    "flags": {
      "breakable": 1
    },
    "name": "Mirror Armor",
    "rating": 2,
    "num": 240
  },
  "mistysurge": {
    "onStart": "onStart(source) {\n            this.field.setTerrain('mistyterrain');\n        }",
    "flags": {},
    "name": "Misty Surge",
    "rating": 3.5,
    "num": 228
  },
  "moldbreaker": {
    "onStart": "onStart(pokemon) {\n            this.add('-ability', pokemon, 'Mold Breaker');\n        }",
    "onModifyMove": "onModifyMove(move) {\n            move.ignoreAbility = true;\n        }",
    "flags": {},
    "name": "Mold Breaker",
    "rating": 3,
    "num": 104
  },
  "moody": {
    "onResidualOrder": 28,
    "onResidualSubOrder": 2,
    "onResidual": "onResidual(pokemon) {\n            let stats = [];\n            const boost = {};\n            let statPlus;\n            for (statPlus in pokemon.boosts) {\n                if (statPlus === 'accuracy' || statPlus === 'evasion')\n                    continue;\n                if (pokemon.boosts[statPlus] < 6) {\n                    stats.push(statPlus);\n                }\n            }\n            let randomStat = stats.length ? this.sample(stats) : undefined;\n            if (randomStat)\n                boost[randomStat] = 2;\n            stats = [];\n            let statMinus;\n            for (statMinus in pokemon.boosts) {\n                if (statMinus === 'accuracy' || statMinus === 'evasion')\n                    continue;\n                if (pokemon.boosts[statMinus] > -6 && statMinus !== randomStat) {\n                    stats.push(statMinus);\n                }\n            }\n            randomStat = stats.length ? this.sample(stats) : undefined;\n            if (randomStat)\n                boost[randomStat] = -1;\n            this.boost(boost, pokemon, pokemon);\n        }",
    "flags": {},
    "name": "Moody",
    "rating": 5,
    "num": 141
  },
  "motordrive": {
    "onTryHit": "onTryHit(target, source, move) {\n            if (target !== source && move.type === 'Electric') {\n                if (!this.boost({ spe: 1 })) {\n                    this.add('-immune', target, '[from] ability: Motor Drive');\n                }\n                return null;\n            }\n        }",
    "flags": {
      "breakable": 1
    },
    "name": "Motor Drive",
    "rating": 3,
    "num": 78
  },
  "moxie": {
    "onSourceAfterFaint": "onSourceAfterFaint(length, target, source, effect) {\n            if (effect && effect.effectType === 'Move') {\n                this.boost({ atk: length }, source);\n            }\n        }",
    "flags": {},
    "name": "Moxie",
    "rating": 3,
    "num": 153
  },
  "multiscale": {
    "onSourceModifyDamage": "onSourceModifyDamage(damage, source, target, move) {\n            if (target.hp >= target.maxhp) {\n                this.debug('Multiscale weaken');\n                return this.chainModify(0.5);\n            }\n        }",
    "flags": {
      "breakable": 1
    },
    "name": "Multiscale",
    "rating": 3.5,
    "num": 136
  },
  "multitype": {
    "flags": {
      "failroleplay": 1,
      "noreceiver": 1,
      "noentrain": 1,
      "notrace": 1,
      "failskillswap": 1,
      "cantsuppress": 1
    },
    "name": "Multitype",
    "rating": 4,
    "num": 121
  },
  "mummy": {
    "onDamagingHit": "onDamagingHit(damage, target, source, move) {\n            const sourceAbility = source.getAbility();\n            if (sourceAbility.flags['cantsuppress'] || sourceAbility.id === 'mummy') {\n                return;\n            }\n            if (this.checkMoveMakesContact(move, source, target, !source.isAlly(target))) {\n                const oldAbility = source.setAbility('mummy', target);\n                if (oldAbility) {\n                    this.add('-activate', target, 'ability: Mummy', this.dex.abilities.get(oldAbility).name, `[of] ${source}`);\n                }\n            }\n        }",
    "flags": {},
    "name": "Mummy",
    "rating": 2,
    "num": 152
  },
  "myceliummight": {
    "onFractionalPriorityPriority": -1,
    "onFractionalPriority": "onFractionalPriority(priority, pokemon, target, move) {\n            if (move.category === 'Status') {\n                return -0.1;\n            }\n        }",
    "onModifyMove": "onModifyMove(move) {\n            if (move.category === 'Status') {\n                move.ignoreAbility = true;\n            }\n        }",
    "flags": {},
    "name": "Mycelium Might",
    "rating": 2,
    "num": 298
  },
  "naturalcure": {
    "onCheckShow": "onCheckShow(pokemon) {\n            // This is complicated\n            // For the most part, in-game, it's obvious whether or not Natural Cure activated,\n            // since you can see how many of your opponent's pokemon are statused.\n            // The only ambiguous situation happens in Doubles/Triples, where multiple pokemon\n            // that could have Natural Cure switch out, but only some of them get cured.\n            if (pokemon.side.active.length === 1)\n                return;\n            if (pokemon.showCure === true || pokemon.showCure === false)\n                return;\n            const cureList = [];\n            let noCureCount = 0;\n            for (const curPoke of pokemon.side.active) {\n                // pokemon not statused\n                if (!curPoke?.status) {\n                    // this.add('-message', \"\" + curPoke + \" skipped: not statused or doesn't exist\");\n                    continue;\n                }\n                if (curPoke.showCure) {\n                    // this.add('-message', \"\" + curPoke + \" skipped: Natural Cure already known\");\n                    continue;\n                }\n                const species = curPoke.species;\n                // pokemon can't get Natural Cure\n                if (!Object.values(species.abilities).includes('Natural Cure')) {\n                    // this.add('-message', \"\" + curPoke + \" skipped: no Natural Cure\");\n                    continue;\n                }\n                // pokemon's ability is known to be Natural Cure\n                if (!species.abilities['1'] && !species.abilities['H']) {\n                    // this.add('-message', \"\" + curPoke + \" skipped: only one ability\");\n                    continue;\n                }\n                // pokemon isn't switching this turn\n                if (curPoke !== pokemon && !this.queue.willSwitch(curPoke)) {\n                    // this.add('-message', \"\" + curPoke + \" skipped: not switching\");\n                    continue;\n                }\n                if (curPoke.hasAbility('naturalcure')) {\n                    // this.add('-message', \"\" + curPoke + \" confirmed: could be Natural Cure (and is)\");\n                    cureList.push(curPoke);\n                }\n                else {\n                    // this.add('-message', \"\" + curPoke + \" confirmed: could be Natural Cure (but isn't)\");\n                    noCureCount++;\n                }\n            }\n            if (!cureList.length || !noCureCount) {\n                // It's possible to know what pokemon were cured\n                for (const pkmn of cureList) {\n                    pkmn.showCure = true;\n                }\n            }\n            else {\n                // It's not possible to know what pokemon were cured\n                // Unlike a -hint, this is real information that battlers need, so we use a -message\n                this.add('-message', `(${cureList.length} of ${pokemon.side.name}'s pokemon ${cureList.length === 1 ? \"was\" : \"were\"} cured by Natural Cure.)`);\n                for (const pkmn of cureList) {\n                    pkmn.showCure = false;\n                }\n            }\n        }",
    "onSwitchOut": "onSwitchOut(pokemon) {\n            if (!pokemon.status)\n                return;\n            // if pokemon.showCure is undefined, it was skipped because its ability\n            // is known\n            if (pokemon.showCure === undefined)\n                pokemon.showCure = true;\n            if (pokemon.showCure)\n                this.add('-curestatus', pokemon, pokemon.status, '[from] ability: Natural Cure');\n            pokemon.clearStatus();\n            // only reset .showCure if it's false\n            // (once you know a Pokemon has Natural Cure, its cures are always known)\n            if (!pokemon.showCure)\n                pokemon.showCure = undefined;\n        }",
    "flags": {},
    "name": "Natural Cure",
    "rating": 2.5,
    "num": 30
  },
  "neuroforce": {
    "onModifyDamage": "onModifyDamage(damage, source, target, move) {\n            if (move && target.getMoveHitData(move).typeMod > 0) {\n                return this.chainModify([5120, 4096]);\n            }\n        }",
    "flags": {},
    "name": "Neuroforce",
    "rating": 2.5,
    "num": 233
  },
  "neutralizinggas": {
    "onSwitchInPriority": 2,
    "onSwitchIn": "onSwitchIn(pokemon) {\n            this.add('-ability', pokemon, 'Neutralizing Gas');\n            pokemon.abilityState.ending = false;\n            const strongWeathers = ['desolateland', 'primordialsea', 'deltastream'];\n            for (const target of this.getAllActive()) {\n                if (target.hasItem('Ability Shield')) {\n                    this.add('-block', target, 'item: Ability Shield');\n                    continue;\n                }\n                // Can't suppress a Tatsugiri inside of Dondozo already\n                if (target.volatiles['commanding']) {\n                    continue;\n                }\n                if (target.illusion) {\n                    this.singleEvent('End', this.dex.abilities.get('Illusion'), target.abilityState, target, pokemon, 'neutralizinggas');\n                }\n                if (target.volatiles['slowstart']) {\n                    delete target.volatiles['slowstart'];\n                    this.add('-end', target, 'Slow Start', '[silent]');\n                }\n                if (strongWeathers.includes(target.getAbility().id)) {\n                    this.singleEvent('End', this.dex.abilities.get(target.getAbility().id), target.abilityState, target, pokemon, 'neutralizinggas');\n                }\n            }\n        }",
    "onEnd": "onEnd(source) {\n            if (source.transformed)\n                return;\n            for (const pokemon of this.getAllActive()) {\n                if (pokemon !== source && pokemon.hasAbility('Neutralizing Gas')) {\n                    return;\n                }\n            }\n            this.add('-end', source, 'ability: Neutralizing Gas');\n            // FIXME this happens before the pokemon switches out, should be the opposite order.\n            // Not an easy fix since we cant use a supported event. Would need some kind of special event that\n            // gathers events to run after the switch and then runs them when the ability is no longer accessible.\n            // (If you're tackling this, do note extreme weathers have the same issue)\n            // Mark this pokemon's ability as ending so Pokemon#ignoringAbility skips it\n            if (source.abilityState.ending)\n                return;\n            source.abilityState.ending = true;\n            const sortedActive = this.getAllActive();\n            this.speedSort(sortedActive);\n            for (const pokemon of sortedActive) {\n                if (pokemon !== source) {\n                    if (pokemon.getAbility().flags['cantsuppress'])\n                        continue; // does not interact with e.g Ice Face, Zen Mode\n                    if (pokemon.hasItem('abilityshield'))\n                        continue; // don't restart abilities that weren't suppressed\n                    // Will be suppressed by Pokemon#ignoringAbility if needed\n                    this.singleEvent('Start', pokemon.getAbility(), pokemon.abilityState, pokemon);\n                    if (pokemon.ability === \"gluttony\") {\n                        pokemon.abilityState.gluttony = false;\n                    }\n                }\n            }\n        }",
    "flags": {
      "failroleplay": 1,
      "noreceiver": 1,
      "noentrain": 1,
      "notrace": 1,
      "failskillswap": 1,
      "notransform": 1
    },
    "name": "Neutralizing Gas",
    "rating": 3.5,
    "num": 256
  },
  "noguard": {
    "onAnyInvulnerabilityPriority": 1,
    "onAnyInvulnerability": "onAnyInvulnerability(target, source, move) {\n            if (move && (source === this.effectState.target || target === this.effectState.target))\n                return 0;\n        }",
    "onAnyAccuracy": "onAnyAccuracy(accuracy, target, source, move) {\n            if (move && (source === this.effectState.target || target === this.effectState.target)) {\n                return true;\n            }\n            return accuracy;\n        }",
    "flags": {},
    "name": "No Guard",
    "rating": 4,
    "num": 99
  },
  "normalize": {
    "onModifyTypePriority": 1,
    "onModifyType": "onModifyType(move, pokemon) {\n            const noModifyType = [\n                'hiddenpower', 'judgment', 'multiattack', 'naturalgift', 'revelationdance', 'struggle', 'technoblast', 'terrainpulse', 'weatherball',\n            ];\n            if (!(move.isZ && move.category !== 'Status') &&\n                // TODO: Figure out actual interaction\n                (!noModifyType.includes(move.id) || this.activeMove?.isMax) && !(move.name === 'Tera Blast' && pokemon.terastallized)) {\n                move.type = 'Normal';\n                move.typeChangerBoosted = this.effect;\n            }\n        }",
    "onBasePowerPriority": 23,
    "onBasePower": "onBasePower(basePower, pokemon, target, move) {\n            if (move.typeChangerBoosted === this.effect)\n                return this.chainModify([4915, 4096]);\n        }",
    "flags": {},
    "name": "Normalize",
    "rating": 0,
    "num": 96
  },
  "oblivious": {
    "onUpdate": "onUpdate(pokemon) {\n            if (pokemon.volatiles['attract']) {\n                this.add('-activate', pokemon, 'ability: Oblivious');\n                pokemon.removeVolatile('attract');\n                this.add('-end', pokemon, 'move: Attract', '[from] ability: Oblivious');\n            }\n            if (pokemon.volatiles['taunt']) {\n                this.add('-activate', pokemon, 'ability: Oblivious');\n                pokemon.removeVolatile('taunt');\n                // Taunt's volatile already sends the -end message when removed\n            }\n        }",
    "onImmunity": "onImmunity(type, pokemon) {\n            if (type === 'attract')\n                return false;\n        }",
    "onTryHit": "onTryHit(pokemon, target, move) {\n            if (move.id === 'attract' || move.id === 'captivate' || move.id === 'taunt') {\n                this.add('-immune', pokemon, '[from] ability: Oblivious');\n                return null;\n            }\n        }",
    "onTryBoost": "onTryBoost(boost, target, source, effect) {\n            if (effect.name === 'Intimidate' && boost.atk) {\n                delete boost.atk;\n                this.add('-fail', target, 'unboost', 'Attack', '[from] ability: Oblivious', `[of] ${target}`);\n            }\n        }",
    "flags": {
      "breakable": 1
    },
    "name": "Oblivious",
    "rating": 1.5,
    "num": 12
  },
  "opportunist": {
    "onFoeAfterBoost": "onFoeAfterBoost(boost, target, source, effect) {\n            if (effect?.name === 'Opportunist' || effect?.name === 'Mirror Herb')\n                return;\n            if (!this.effectState.boosts)\n                this.effectState.boosts = {};\n            const boostPlus = this.effectState.boosts;\n            let i;\n            for (i in boost) {\n                if (boost[i] > 0) {\n                    boostPlus[i] = (boostPlus[i] || 0) + boost[i];\n                }\n            }\n        }",
    "onAnySwitchInPriority": -3,
    "onAnySwitchIn": "onAnySwitchIn() {\n            if (!this.effectState.boosts)\n                return;\n            this.boost(this.effectState.boosts, this.effectState.target);\n            delete this.effectState.boosts;\n        }",
    "onAnyAfterMega": "onAnyAfterMega() {\n            if (!this.effectState.boosts)\n                return;\n            this.boost(this.effectState.boosts, this.effectState.target);\n            delete this.effectState.boosts;\n        }",
    "onAnyAfterTerastallization": "onAnyAfterTerastallization() {\n            if (!this.effectState.boosts)\n                return;\n            this.boost(this.effectState.boosts, this.effectState.target);\n            delete this.effectState.boosts;\n        }",
    "onAnyAfterMove": "onAnyAfterMove() {\n            if (!this.effectState.boosts)\n                return;\n            this.boost(this.effectState.boosts, this.effectState.target);\n            delete this.effectState.boosts;\n        }",
    "onResidualOrder": 29,
    "onResidual": "onResidual(pokemon) {\n            if (!this.effectState.boosts)\n                return;\n            this.boost(this.effectState.boosts, this.effectState.target);\n            delete this.effectState.boosts;\n        }",
    "onEnd": "onEnd() {\n            delete this.effectState.boosts;\n        }",
    "flags": {},
    "name": "Opportunist",
    "rating": 3,
    "num": 290
  },
  "orichalcumpulse": {
    "onStart": "onStart(pokemon) {\n            if (this.field.setWeather('sunnyday')) {\n                this.add('-activate', pokemon, 'Orichalcum Pulse', '[source]');\n            }\n            else if (this.field.isWeather('sunnyday')) {\n                this.add('-activate', pokemon, 'ability: Orichalcum Pulse');\n            }\n        }",
    "onModifyAtkPriority": 5,
    "onModifyAtk": "onModifyAtk(atk, pokemon) {\n            if (['sunnyday', 'desolateland'].includes(pokemon.effectiveWeather())) {\n                this.debug('Orichalcum boost');\n                return this.chainModify([5461, 4096]);\n            }\n        }",
    "flags": {},
    "name": "Orichalcum Pulse",
    "rating": 4.5,
    "num": 288
  },
  "overcoat": {
    "onImmunity": "onImmunity(type, pokemon) {\n            if (type === 'sandstorm' || type === 'hail' || type === 'powder')\n                return false;\n        }",
    "onTryHitPriority": 1,
    "onTryHit": "onTryHit(target, source, move) {\n            if (move.flags['powder'] && target !== source && this.dex.getImmunity('powder', target)) {\n                this.add('-immune', target, '[from] ability: Overcoat');\n                return null;\n            }\n        }",
    "flags": {
      "breakable": 1
    },
    "name": "Overcoat",
    "rating": 2,
    "num": 142
  },
  "overgrow": {
    "onModifyAtkPriority": 5,
    "onModifyAtk": "onModifyAtk(atk, attacker, defender, move) {\n            if (move.type === 'Grass' && attacker.hp <= attacker.maxhp / 3) {\n                this.debug('Overgrow boost');\n                return this.chainModify(1.5);\n            }\n        }",
    "onModifySpAPriority": 5,
    "onModifySpA": "onModifySpA(atk, attacker, defender, move) {\n            if (move.type === 'Grass' && attacker.hp <= attacker.maxhp / 3) {\n                this.debug('Overgrow boost');\n                return this.chainModify(1.5);\n            }\n        }",
    "flags": {},
    "name": "Overgrow",
    "rating": 2,
    "num": 65
  },
  "owntempo": {
    "onUpdate": "onUpdate(pokemon) {\n            if (pokemon.volatiles['confusion']) {\n                this.add('-activate', pokemon, 'ability: Own Tempo');\n                pokemon.removeVolatile('confusion');\n            }\n        }",
    "onTryAddVolatile": "onTryAddVolatile(status, pokemon) {\n            if (status.id === 'confusion')\n                return null;\n        }",
    "onHit": "onHit(target, source, move) {\n            if (move?.volatileStatus === 'confusion') {\n                this.add('-immune', target, 'confusion', '[from] ability: Own Tempo');\n            }\n        }",
    "onTryBoost": "onTryBoost(boost, target, source, effect) {\n            if (effect.name === 'Intimidate' && boost.atk) {\n                delete boost.atk;\n                this.add('-fail', target, 'unboost', 'Attack', '[from] ability: Own Tempo', `[of] ${target}`);\n            }\n        }",
    "flags": {
      "breakable": 1
    },
    "name": "Own Tempo",
    "rating": 1.5,
    "num": 20
  },
  "parentalbond": {
    "onPrepareHit": "onPrepareHit(source, target, move) {\n            if (move.category === 'Status' || move.multihit || move.flags['noparentalbond'] || move.flags['charge'] ||\n                move.flags['futuremove'] || move.spreadHit || move.isZ || move.isMax)\n                return;\n            move.multihit = 2;\n            move.multihitType = 'parentalbond';\n        }",
    "onSourceModifySecondaries": "onSourceModifySecondaries(secondaries, target, source, move) {\n            if (move.multihitType === 'parentalbond' && move.id === 'secretpower' && move.hit < 2) {\n                // hack to prevent accidentally suppressing King's Rock/Razor Fang\n                return secondaries.filter(effect => effect.volatileStatus === 'flinch');\n            }\n        }",
    "flags": {},
    "name": "Parental Bond",
    "rating": 4.5,
    "num": 185
  },
  "pastelveil": {
    "onStart": "onStart(pokemon) {\n            for (const ally of pokemon.alliesAndSelf()) {\n                if (['psn', 'tox'].includes(ally.status)) {\n                    this.add('-activate', pokemon, 'ability: Pastel Veil');\n                    ally.cureStatus();\n                }\n            }\n        }",
    "onUpdate": "onUpdate(pokemon) {\n            if (['psn', 'tox'].includes(pokemon.status)) {\n                this.add('-activate', pokemon, 'ability: Pastel Veil');\n                pokemon.cureStatus();\n            }\n        }",
    "onAnySwitchIn": "onAnySwitchIn() {\n            this.effect.onStart.call(this, this.effectState.target);\n        }",
    "onSetStatus": "onSetStatus(status, target, source, effect) {\n            if (!['psn', 'tox'].includes(status.id))\n                return;\n            if (effect?.status) {\n                this.add('-immune', target, '[from] ability: Pastel Veil');\n            }\n            return false;\n        }",
    "onAllySetStatus": "onAllySetStatus(status, target, source, effect) {\n            if (!['psn', 'tox'].includes(status.id))\n                return;\n            if (effect?.status) {\n                const effectHolder = this.effectState.target;\n                this.add('-block', target, 'ability: Pastel Veil', `[of] ${effectHolder}`);\n            }\n            return false;\n        }",
    "flags": {
      "breakable": 1
    },
    "name": "Pastel Veil",
    "rating": 2,
    "num": 257
  },
  "perishbody": {
    "onDamagingHit": "onDamagingHit(damage, target, source, move) {\n            if (!this.checkMoveMakesContact(move, source, target) || source.volatiles['perishsong'])\n                return;\n            this.add('-ability', target, 'Perish Body');\n            source.addVolatile('perishsong');\n            target.addVolatile('perishsong');\n        }",
    "flags": {},
    "name": "Perish Body",
    "rating": 1,
    "num": 253
  },
  "pickpocket": {
    "onAfterMoveSecondary": "onAfterMoveSecondary(target, source, move) {\n            if (source && source !== target && move?.flags['contact']) {\n                if (target.item || target.switchFlag || target.forceSwitchFlag || source.switchFlag === true) {\n                    return;\n                }\n                const yourItem = source.takeItem(target);\n                if (!yourItem) {\n                    return;\n                }\n                if (!target.setItem(yourItem)) {\n                    source.item = yourItem.id;\n                    return;\n                }\n                this.add('-enditem', source, yourItem, '[silent]', '[from] ability: Pickpocket', `[of] ${source}`);\n                this.add('-item', target, yourItem, '[from] ability: Pickpocket', `[of] ${source}`);\n            }\n        }",
    "flags": {},
    "name": "Pickpocket",
    "rating": 1,
    "num": 124
  },
  "pickup": {
    "onResidualOrder": 28,
    "onResidualSubOrder": 2,
    "onResidual": "onResidual(pokemon) {\n            if (pokemon.item)\n                return;\n            const pickupTargets = this.getAllActive().filter(target => (target.lastItem && target.usedItemThisTurn && pokemon.isAdjacent(target)));\n            if (!pickupTargets.length)\n                return;\n            const randomTarget = this.sample(pickupTargets);\n            const item = randomTarget.lastItem;\n            randomTarget.lastItem = '';\n            this.add('-item', pokemon, this.dex.items.get(item), '[from] ability: Pickup');\n            pokemon.setItem(item);\n        }",
    "flags": {},
    "name": "Pickup",
    "rating": 0.5,
    "num": 53
  },
  "pixilate": {
    "onModifyTypePriority": -1,
    "onModifyType": "onModifyType(move, pokemon) {\n            const noModifyType = [\n                'judgment', 'multiattack', 'naturalgift', 'revelationdance', 'technoblast', 'terrainpulse', 'weatherball',\n            ];\n            if (move.type === 'Normal' && (!noModifyType.includes(move.id) || this.activeMove?.isMax) &&\n                !(move.isZ && move.category !== 'Status') && !(move.name === 'Tera Blast' && pokemon.terastallized)) {\n                move.type = 'Fairy';\n                move.typeChangerBoosted = this.effect;\n            }\n        }",
    "onBasePowerPriority": 23,
    "onBasePower": "onBasePower(basePower, pokemon, target, move) {\n            if (move.typeChangerBoosted === this.effect)\n                return this.chainModify([4915, 4096]);\n        }",
    "flags": {},
    "name": "Pixilate",
    "rating": 4,
    "num": 182
  },
  "plus": {
    "onModifySpAPriority": 5,
    "onModifySpA": "onModifySpA(spa, pokemon) {\n            for (const allyActive of pokemon.allies()) {\n                if (allyActive.hasAbility(['minus', 'plus'])) {\n                    return this.chainModify(1.5);\n                }\n            }\n        }",
    "flags": {},
    "name": "Plus",
    "rating": 0,
    "num": 57
  },
  "poisonheal": {
    "onDamagePriority": 1,
    "onDamage": "onDamage(damage, target, source, effect) {\n            if (effect.id === 'psn' || effect.id === 'tox') {\n                this.heal(target.baseMaxhp / 8);\n                return false;\n            }\n        }",
    "flags": {},
    "name": "Poison Heal",
    "rating": 4,
    "num": 90
  },
  "poisonpoint": {
    "onDamagingHit": "onDamagingHit(damage, target, source, move) {\n            if (this.checkMoveMakesContact(move, source, target)) {\n                if (this.randomChance(3, 10)) {\n                    source.trySetStatus('psn', target);\n                }\n            }\n        }",
    "flags": {},
    "name": "Poison Point",
    "rating": 1.5,
    "num": 38
  },
  "poisonpuppeteer": {
    "onAnyAfterSetStatus": "onAnyAfterSetStatus(status, target, source, effect) {\n            if (source.baseSpecies.name !== \"Pecharunt\")\n                return;\n            if (source !== this.effectState.target || target === source || effect.effectType !== 'Move')\n                return;\n            if (status.id === 'psn' || status.id === 'tox') {\n                target.addVolatile('confusion');\n            }\n        }",
    "flags": {
      "failroleplay": 1,
      "noreceiver": 1,
      "noentrain": 1,
      "notrace": 1,
      "failskillswap": 1
    },
    "name": "Poison Puppeteer",
    "rating": 3,
    "num": 310
  },
  "poisontouch": {
    "onSourceDamagingHit": "onSourceDamagingHit(damage, target, source, move) {\n            // Despite not being a secondary, Shield Dust / Covert Cloak block Poison Touch's effect\n            if (target.hasAbility('shielddust') || target.hasItem('covertcloak'))\n                return;\n            if (this.checkMoveMakesContact(move, target, source)) {\n                if (this.randomChance(3, 10)) {\n                    target.trySetStatus('psn', source);\n                }\n            }\n        }",
    "flags": {},
    "name": "Poison Touch",
    "rating": 2,
    "num": 143
  },
  "powerconstruct": {
    "onResidualOrder": 29,
    "onResidual": "onResidual(pokemon) {\n            if (pokemon.baseSpecies.baseSpecies !== 'Zygarde' || pokemon.transformed || !pokemon.hp)\n                return;\n            if (pokemon.species.id === 'zygardecomplete' || pokemon.hp > pokemon.maxhp / 2)\n                return;\n            this.add('-activate', pokemon, 'ability: Power Construct');\n            pokemon.formeChange('Zygarde-Complete', this.effect, true);\n            pokemon.formeRegression = true;\n        }",
    "flags": {
      "failroleplay": 1,
      "noreceiver": 1,
      "noentrain": 1,
      "notrace": 1,
      "failskillswap": 1,
      "cantsuppress": 1
    },
    "name": "Power Construct",
    "rating": 5,
    "num": 211
  },
  "powerofalchemy": {
    "onAllyFaint": "onAllyFaint(target) {\n            if (!this.effectState.target.hp)\n                return;\n            const ability = target.getAbility();\n            if (ability.flags['noreceiver'] || ability.id === 'noability')\n                return;\n            if (this.effectState.target.setAbility(ability)) {\n                this.add('-ability', this.effectState.target, ability, '[from] ability: Power of Alchemy', `[of] ${target}`);\n            }\n        }",
    "flags": {
      "failroleplay": 1,
      "noreceiver": 1,
      "noentrain": 1,
      "notrace": 1
    },
    "name": "Power of Alchemy",
    "rating": 0,
    "num": 223
  },
  "powerspot": {
    "onAllyBasePowerPriority": 22,
    "onAllyBasePower": "onAllyBasePower(basePower, attacker, defender, move) {\n            if (attacker !== this.effectState.target) {\n                this.debug('Power Spot boost');\n                return this.chainModify([5325, 4096]);\n            }\n        }",
    "flags": {},
    "name": "Power Spot",
    "rating": 0,
    "num": 249
  },
  "prankster": {
    "onModifyPriority": "onModifyPriority(priority, pokemon, target, move) {\n            if (move?.category === 'Status') {\n                move.pranksterBoosted = true;\n                return priority + 1;\n            }\n        }",
    "flags": {},
    "name": "Prankster",
    "rating": 4,
    "num": 158
  },
  "pressure": {
    "onStart": "onStart(pokemon) {\n            this.add('-ability', pokemon, 'Pressure');\n        }",
    "onDeductPP": "onDeductPP(target, source) {\n            if (target.isAlly(source))\n                return;\n            return 1;\n        }",
    "flags": {},
    "name": "Pressure",
    "rating": 2.5,
    "num": 46
  },
  "primordialsea": {
    "onStart": "onStart(source) {\n            this.field.setWeather('primordialsea');\n        }",
    "onAnySetWeather": "onAnySetWeather(target, source, weather) {\n            const strongWeathers = ['desolateland', 'primordialsea', 'deltastream'];\n            if (this.field.getWeather().id === 'primordialsea' && !strongWeathers.includes(weather.id))\n                return false;\n        }",
    "onEnd": "onEnd(pokemon) {\n            if (this.field.weatherState.source !== pokemon)\n                return;\n            for (const target of this.getAllActive()) {\n                if (target === pokemon)\n                    continue;\n                if (target.hasAbility('primordialsea')) {\n                    this.field.weatherState.source = target;\n                    return;\n                }\n            }\n            this.field.clearWeather();\n        }",
    "flags": {},
    "name": "Primordial Sea",
    "rating": 4.5,
    "num": 189
  },
  "prismarmor": {
    "onSourceModifyDamage": "onSourceModifyDamage(damage, source, target, move) {\n            if (target.getMoveHitData(move).typeMod > 0) {\n                this.debug('Prism Armor neutralize');\n                return this.chainModify(0.75);\n            }\n        }",
    "flags": {},
    "name": "Prism Armor",
    "rating": 3,
    "num": 232
  },
  "propellertail": {
    "onModifyMovePriority": 1,
    "onModifyMove": "onModifyMove(move) {\n            // most of the implementation is in Battle#getTarget\n            move.tracksTarget = move.target !== 'scripted';\n        }",
    "flags": {},
    "name": "Propeller Tail",
    "rating": 0,
    "num": 239
  },
  "protean": {
    "onPrepareHit": "onPrepareHit(source, target, move) {\n            if (this.effectState.protean === source.previouslySwitchedIn)\n                return;\n            if (move.hasBounced || move.flags['futuremove'] || move.sourceEffect === 'snatch' || move.callsMove)\n                return;\n            const type = move.type;\n            if (type && type !== '???' && source.getTypes().join() !== type) {\n                if (!source.setType(type))\n                    return;\n                this.effectState.protean = source.previouslySwitchedIn;\n                this.add('-start', source, 'typechange', type, '[from] ability: Protean');\n            }\n        }",
    "flags": {},
    "name": "Protean",
    "rating": 4,
    "num": 168
  },
  "protosynthesis": {
    "onSwitchInPriority": -2,
    "onStart": "onStart(pokemon) {\n            this.singleEvent('WeatherChange', this.effect, this.effectState, pokemon);\n        }",
    "onWeatherChange": "onWeatherChange(pokemon) {\n            // Protosynthesis is not affected by Utility Umbrella\n            if (this.field.isWeather('sunnyday')) {\n                pokemon.addVolatile('protosynthesis');\n            }\n            else if (!pokemon.volatiles['protosynthesis']?.fromBooster && !this.field.isWeather('sunnyday')) {\n                pokemon.removeVolatile('protosynthesis');\n            }\n        }",
    "onEnd": "onEnd(pokemon) {\n            delete pokemon.volatiles['protosynthesis'];\n            this.add('-end', pokemon, 'Protosynthesis', '[silent]');\n        }",
    "condition": {
      "noCopy": true,
      "onStart": "onStart(pokemon, source, effect) {\n                if (effect?.name === 'Booster Energy') {\n                    this.effectState.fromBooster = true;\n                    this.add('-activate', pokemon, 'ability: Protosynthesis', '[fromitem]');\n                }\n                else {\n                    this.add('-activate', pokemon, 'ability: Protosynthesis');\n                }\n                this.effectState.bestStat = pokemon.getBestStat(false, true);\n                this.add('-start', pokemon, 'protosynthesis' + this.effectState.bestStat);\n            }",
      "onModifyAtkPriority": 5,
      "onModifyAtk": "onModifyAtk(atk, pokemon) {\n                if (this.effectState.bestStat !== 'atk' || pokemon.ignoringAbility())\n                    return;\n                this.debug('Protosynthesis atk boost');\n                return this.chainModify([5325, 4096]);\n            }",
      "onModifyDefPriority": 6,
      "onModifyDef": "onModifyDef(def, pokemon) {\n                if (this.effectState.bestStat !== 'def' || pokemon.ignoringAbility())\n                    return;\n                this.debug('Protosynthesis def boost');\n                return this.chainModify([5325, 4096]);\n            }",
      "onModifySpAPriority": 5,
      "onModifySpA": "onModifySpA(spa, pokemon) {\n                if (this.effectState.bestStat !== 'spa' || pokemon.ignoringAbility())\n                    return;\n                this.debug('Protosynthesis spa boost');\n                return this.chainModify([5325, 4096]);\n            }",
      "onModifySpDPriority": 6,
      "onModifySpD": "onModifySpD(spd, pokemon) {\n                if (this.effectState.bestStat !== 'spd' || pokemon.ignoringAbility())\n                    return;\n                this.debug('Protosynthesis spd boost');\n                return this.chainModify([5325, 4096]);\n            }",
      "onModifySpe": "onModifySpe(spe, pokemon) {\n                if (this.effectState.bestStat !== 'spe' || pokemon.ignoringAbility())\n                    return;\n                this.debug('Protosynthesis spe boost');\n                return this.chainModify(1.5);\n            }",
      "onEnd": "onEnd(pokemon) {\n                this.add('-end', pokemon, 'Protosynthesis');\n            }"
    },
    "flags": {
      "failroleplay": 1,
      "noreceiver": 1,
      "noentrain": 1,
      "notrace": 1,
      "failskillswap": 1,
      "notransform": 1
    },
    "name": "Protosynthesis",
    "rating": 3,
    "num": 281
  },
  "psychicsurge": {
    "onStart": "onStart(source) {\n            this.field.setTerrain('psychicterrain');\n        }",
    "flags": {},
    "name": "Psychic Surge",
    "rating": 4,
    "num": 227
  },
  "punkrock": {
    "onBasePowerPriority": 7,
    "onBasePower": "onBasePower(basePower, attacker, defender, move) {\n            if (move.flags['sound']) {\n                this.debug('Punk Rock boost');\n                return this.chainModify([5325, 4096]);\n            }\n        }",
    "onSourceModifyDamage": "onSourceModifyDamage(damage, source, target, move) {\n            if (move.flags['sound']) {\n                this.debug('Punk Rock weaken');\n                return this.chainModify(0.5);\n            }\n        }",
    "flags": {
      "breakable": 1
    },
    "name": "Punk Rock",
    "rating": 3.5,
    "num": 244
  },
  "purepower": {
    "onModifyAtkPriority": 5,
    "onModifyAtk": "onModifyAtk(atk) {\n            return this.chainModify(2);\n        }",
    "flags": {},
    "name": "Pure Power",
    "rating": 5,
    "num": 74
  },
  "purifyingsalt": {
    "onSetStatus": "onSetStatus(status, target, source, effect) {\n            if (effect?.status) {\n                this.add('-immune', target, '[from] ability: Purifying Salt');\n            }\n            return false;\n        }",
    "onTryAddVolatile": "onTryAddVolatile(status, target) {\n            if (status.id === 'yawn') {\n                this.add('-immune', target, '[from] ability: Purifying Salt');\n                return null;\n            }\n        }",
    "onSourceModifyAtkPriority": 6,
    "onSourceModifyAtk": "onSourceModifyAtk(atk, attacker, defender, move) {\n            if (move.type === 'Ghost') {\n                this.debug('Purifying Salt weaken');\n                return this.chainModify(0.5);\n            }\n        }",
    "onSourceModifySpAPriority": 5,
    "onSourceModifySpA": "onSourceModifySpA(spa, attacker, defender, move) {\n            if (move.type === 'Ghost') {\n                this.debug('Purifying Salt weaken');\n                return this.chainModify(0.5);\n            }\n        }",
    "flags": {
      "breakable": 1
    },
    "name": "Purifying Salt",
    "rating": 4,
    "num": 272
  },
  "quarkdrive": {
    "onSwitchInPriority": -2,
    "onStart": "onStart(pokemon) {\n            this.singleEvent('TerrainChange', this.effect, this.effectState, pokemon);\n        }",
    "onTerrainChange": "onTerrainChange(pokemon) {\n            if (this.field.isTerrain('electricterrain')) {\n                pokemon.addVolatile('quarkdrive');\n            }\n            else if (!pokemon.volatiles['quarkdrive']?.fromBooster) {\n                pokemon.removeVolatile('quarkdrive');\n            }\n        }",
    "onEnd": "onEnd(pokemon) {\n            delete pokemon.volatiles['quarkdrive'];\n            this.add('-end', pokemon, 'Quark Drive', '[silent]');\n        }",
    "condition": {
      "noCopy": true,
      "onStart": "onStart(pokemon, source, effect) {\n                if (effect?.name === 'Booster Energy') {\n                    this.effectState.fromBooster = true;\n                    this.add('-activate', pokemon, 'ability: Quark Drive', '[fromitem]');\n                }\n                else {\n                    this.add('-activate', pokemon, 'ability: Quark Drive');\n                }\n                this.effectState.bestStat = pokemon.getBestStat(false, true);\n                this.add('-start', pokemon, 'quarkdrive' + this.effectState.bestStat);\n            }",
      "onModifyAtkPriority": 5,
      "onModifyAtk": "onModifyAtk(atk, pokemon) {\n                if (this.effectState.bestStat !== 'atk' || pokemon.ignoringAbility())\n                    return;\n                this.debug('Quark Drive atk boost');\n                return this.chainModify([5325, 4096]);\n            }",
      "onModifyDefPriority": 6,
      "onModifyDef": "onModifyDef(def, pokemon) {\n                if (this.effectState.bestStat !== 'def' || pokemon.ignoringAbility())\n                    return;\n                this.debug('Quark Drive def boost');\n                return this.chainModify([5325, 4096]);\n            }",
      "onModifySpAPriority": 5,
      "onModifySpA": "onModifySpA(spa, pokemon) {\n                if (this.effectState.bestStat !== 'spa' || pokemon.ignoringAbility())\n                    return;\n                this.debug('Quark Drive spa boost');\n                return this.chainModify([5325, 4096]);\n            }",
      "onModifySpDPriority": 6,
      "onModifySpD": "onModifySpD(spd, pokemon) {\n                if (this.effectState.bestStat !== 'spd' || pokemon.ignoringAbility())\n                    return;\n                this.debug('Quark Drive spd boost');\n                return this.chainModify([5325, 4096]);\n            }",
      "onModifySpe": "onModifySpe(spe, pokemon) {\n                if (this.effectState.bestStat !== 'spe' || pokemon.ignoringAbility())\n                    return;\n                this.debug('Quark Drive spe boost');\n                return this.chainModify(1.5);\n            }",
      "onEnd": "onEnd(pokemon) {\n                this.add('-end', pokemon, 'Quark Drive');\n            }"
    },
    "flags": {
      "failroleplay": 1,
      "noreceiver": 1,
      "noentrain": 1,
      "notrace": 1,
      "failskillswap": 1,
      "notransform": 1
    },
    "name": "Quark Drive",
    "rating": 3,
    "num": 282
  },
  "queenlymajesty": {
    "onFoeTryMove": "onFoeTryMove(target, source, move) {\n            const targetAllExceptions = ['perishsong', 'flowershield', 'rototiller'];\n            if (move.target === 'foeSide' || (move.target === 'all' && !targetAllExceptions.includes(move.id))) {\n                return;\n            }\n            const dazzlingHolder = this.effectState.target;\n            if ((source.isAlly(dazzlingHolder) || move.target === 'all') && move.priority > 0.1) {\n                this.attrLastMove('[still]');\n                this.add('cant', dazzlingHolder, 'ability: Queenly Majesty', move, `[of] ${target}`);\n                return false;\n            }\n        }",
    "flags": {
      "breakable": 1
    },
    "name": "Queenly Majesty",
    "rating": 2.5,
    "num": 214
  },
  "quickdraw": {
    "onFractionalPriorityPriority": -1,
    "onFractionalPriority": "onFractionalPriority(priority, pokemon, target, move) {\n            if (move.category !== \"Status\" && this.randomChance(3, 10)) {\n                this.add('-activate', pokemon, 'ability: Quick Draw');\n                return 0.1;\n            }\n        }",
    "flags": {},
    "name": "Quick Draw",
    "rating": 2.5,
    "num": 259
  },
  "quickfeet": {
    "onModifySpe": "onModifySpe(spe, pokemon) {\n            if (pokemon.status) {\n                return this.chainModify(1.5);\n            }\n        }",
    "flags": {},
    "name": "Quick Feet",
    "rating": 2.5,
    "num": 95
  },
  "raindish": {
    "onWeather": "onWeather(target, source, effect) {\n            if (target.hasItem('utilityumbrella'))\n                return;\n            if (effect.id === 'raindance' || effect.id === 'primordialsea') {\n                this.heal(target.baseMaxhp / 16);\n            }\n        }",
    "flags": {},
    "name": "Rain Dish",
    "rating": 1.5,
    "num": 44
  },
  "rattled": {
    "onDamagingHit": "onDamagingHit(damage, target, source, move) {\n            if (['Dark', 'Bug', 'Ghost'].includes(move.type)) {\n                this.boost({ spe: 1 });\n            }\n        }",
    "onAfterBoost": "onAfterBoost(boost, target, source, effect) {\n            if (effect?.name === 'Intimidate' && boost.atk) {\n                this.boost({ spe: 1 });\n            }\n        }",
    "flags": {},
    "name": "Rattled",
    "rating": 1,
    "num": 155
  },
  "receiver": {
    "onAllyFaint": "onAllyFaint(target) {\n            if (!this.effectState.target.hp)\n                return;\n            const ability = target.getAbility();\n            if (ability.flags['noreceiver'] || ability.id === 'noability')\n                return;\n            if (this.effectState.target.setAbility(ability)) {\n                this.add('-ability', this.effectState.target, ability, '[from] ability: Receiver', `[of] ${target}`);\n            }\n        }",
    "flags": {
      "failroleplay": 1,
      "noreceiver": 1,
      "noentrain": 1,
      "notrace": 1
    },
    "name": "Receiver",
    "rating": 0,
    "num": 222
  },
  "reckless": {
    "onBasePowerPriority": 23,
    "onBasePower": "onBasePower(basePower, attacker, defender, move) {\n            if (move.recoil || move.hasCrashDamage) {\n                this.debug('Reckless boost');\n                return this.chainModify([4915, 4096]);\n            }\n        }",
    "flags": {},
    "name": "Reckless",
    "rating": 3,
    "num": 120
  },
  "refrigerate": {
    "onModifyTypePriority": -1,
    "onModifyType": "onModifyType(move, pokemon) {\n            const noModifyType = [\n                'judgment', 'multiattack', 'naturalgift', 'revelationdance', 'technoblast', 'terrainpulse', 'weatherball',\n            ];\n            if (move.type === 'Normal' && (!noModifyType.includes(move.id) || this.activeMove?.isMax) &&\n                !(move.isZ && move.category !== 'Status') && !(move.name === 'Tera Blast' && pokemon.terastallized)) {\n                move.type = 'Ice';\n                move.typeChangerBoosted = this.effect;\n            }\n        }",
    "onBasePowerPriority": 23,
    "onBasePower": "onBasePower(basePower, pokemon, target, move) {\n            if (move.typeChangerBoosted === this.effect)\n                return this.chainModify([4915, 4096]);\n        }",
    "flags": {},
    "name": "Refrigerate",
    "rating": 4,
    "num": 174
  },
  "regenerator": {
    "onSwitchOut": "onSwitchOut(pokemon) {\n            pokemon.heal(pokemon.baseMaxhp / 3);\n        }",
    "flags": {},
    "name": "Regenerator",
    "rating": 4.5,
    "num": 144
  },
  "ripen": {
    "onTryHeal": "onTryHeal(damage, target, source, effect) {\n            if (!effect)\n                return;\n            if (effect.name === 'Berry Juice' || effect.name === 'Leftovers') {\n                this.add('-activate', target, 'ability: Ripen');\n            }\n            if (effect.isBerry)\n                return this.chainModify(2);\n        }",
    "onChangeBoost": "onChangeBoost(boost, target, source, effect) {\n            if (effect && effect.isBerry) {\n                let b;\n                for (b in boost) {\n                    boost[b] *= 2;\n                }\n            }\n        }",
    "onSourceModifyDamagePriority": -1,
    "onSourceModifyDamage": "onSourceModifyDamage(damage, source, target, move) {\n            if (target.abilityState.berryWeaken) {\n                target.abilityState.berryWeaken = false;\n                return this.chainModify(0.5);\n            }\n        }",
    "onTryEatItemPriority": -1,
    "onTryEatItem": "onTryEatItem(item, pokemon) {\n            this.add('-activate', pokemon, 'ability: Ripen');\n        }",
    "onEatItem": "onEatItem(item, pokemon) {\n            const weakenBerries = [\n                'Babiri Berry', 'Charti Berry', 'Chilan Berry', 'Chople Berry', 'Coba Berry', 'Colbur Berry', 'Haban Berry', 'Kasib Berry', 'Kebia Berry', 'Occa Berry', 'Passho Berry', 'Payapa Berry', 'Rindo Berry', 'Roseli Berry', 'Shuca Berry', 'Tanga Berry', 'Wacan Berry', 'Yache Berry',\n            ];\n            // Record if the pokemon ate a berry to resist the attack\n            pokemon.abilityState.berryWeaken = weakenBerries.includes(item.name);\n        }",
    "flags": {},
    "name": "Ripen",
    "rating": 2,
    "num": 247
  },
  "rivalry": {
    "onBasePowerPriority": 24,
    "onBasePower": "onBasePower(basePower, attacker, defender, move) {\n            if (attacker.gender && defender.gender) {\n                if (attacker.gender === defender.gender) {\n                    this.debug('Rivalry boost');\n                    return this.chainModify(1.25);\n                }\n                else {\n                    this.debug('Rivalry weaken');\n                    return this.chainModify(0.75);\n                }\n            }\n        }",
    "flags": {},
    "name": "Rivalry",
    "rating": 0,
    "num": 79
  },
  "rkssystem": {
    "flags": {
      "failroleplay": 1,
      "noreceiver": 1,
      "noentrain": 1,
      "notrace": 1,
      "failskillswap": 1,
      "cantsuppress": 1
    },
    "name": "RKS System",
    "rating": 4,
    "num": 225
  },
  "rockhead": {
    "onDamage": "onDamage(damage, target, source, effect) {\n            if (effect.id === 'recoil') {\n                if (!this.activeMove)\n                    throw new Error(\"Battle.activeMove is null\");\n                if (this.activeMove.id !== 'struggle')\n                    return null;\n            }\n        }",
    "flags": {},
    "name": "Rock Head",
    "rating": 3,
    "num": 69
  },
  "rockypayload": {
    "onModifyAtkPriority": 5,
    "onModifyAtk": "onModifyAtk(atk, attacker, defender, move) {\n            if (move.type === 'Rock') {\n                this.debug('Rocky Payload boost');\n                return this.chainModify(1.5);\n            }\n        }",
    "onModifySpAPriority": 5,
    "onModifySpA": "onModifySpA(atk, attacker, defender, move) {\n            if (move.type === 'Rock') {\n                this.debug('Rocky Payload boost');\n                return this.chainModify(1.5);\n            }\n        }",
    "flags": {},
    "name": "Rocky Payload",
    "rating": 3.5,
    "num": 276
  },
  "roughskin": {
    "onDamagingHitOrder": 1,
    "onDamagingHit": "onDamagingHit(damage, target, source, move) {\n            if (this.checkMoveMakesContact(move, source, target, true)) {\n                this.damage(source.baseMaxhp / 8, source, target);\n            }\n        }",
    "flags": {},
    "name": "Rough Skin",
    "rating": 2.5,
    "num": 24
  },
  "runaway": {
    "flags": {},
    "name": "Run Away",
    "rating": 0,
    "num": 50
  },
  "sandforce": {
    "onBasePowerPriority": 21,
    "onBasePower": "onBasePower(basePower, attacker, defender, move) {\n            if (this.field.isWeather('sandstorm')) {\n                if (move.type === 'Rock' || move.type === 'Ground' || move.type === 'Steel') {\n                    this.debug('Sand Force boost');\n                    return this.chainModify([5325, 4096]);\n                }\n            }\n        }",
    "onImmunity": "onImmunity(type, pokemon) {\n            if (type === 'sandstorm')\n                return false;\n        }",
    "flags": {},
    "name": "Sand Force",
    "rating": 2,
    "num": 159
  },
  "sandrush": {
    "onModifySpe": "onModifySpe(spe, pokemon) {\n            if (this.field.isWeather('sandstorm')) {\n                return this.chainModify(2);\n            }\n        }",
    "onImmunity": "onImmunity(type, pokemon) {\n            if (type === 'sandstorm')\n                return false;\n        }",
    "flags": {},
    "name": "Sand Rush",
    "rating": 3,
    "num": 146
  },
  "sandspit": {
    "onDamagingHit": "onDamagingHit(damage, target, source, move) {\n            this.field.setWeather('sandstorm');\n        }",
    "flags": {},
    "name": "Sand Spit",
    "rating": 1,
    "num": 245
  },
  "sandstream": {
    "onStart": "onStart(source) {\n            this.field.setWeather('sandstorm');\n        }",
    "flags": {},
    "name": "Sand Stream",
    "rating": 4,
    "num": 45
  },
  "sandveil": {
    "onImmunity": "onImmunity(type, pokemon) {\n            if (type === 'sandstorm')\n                return false;\n        }",
    "onModifyAccuracyPriority": -1,
    "onModifyAccuracy": "onModifyAccuracy(accuracy) {\n            if (typeof accuracy !== 'number')\n                return;\n            if (this.field.isWeather('sandstorm')) {\n                this.debug('Sand Veil - decreasing accuracy');\n                return this.chainModify([3277, 4096]);\n            }\n        }",
    "flags": {
      "breakable": 1
    },
    "name": "Sand Veil",
    "rating": 1.5,
    "num": 8
  },
  "sapsipper": {
    "onTryHitPriority": 1,
    "onTryHit": "onTryHit(target, source, move) {\n            if (target !== source && move.type === 'Grass') {\n                if (!this.boost({ atk: 1 })) {\n                    this.add('-immune', target, '[from] ability: Sap Sipper');\n                }\n                return null;\n            }\n        }",
    "onAllyTryHitSide": "onAllyTryHitSide(target, source, move) {\n            if (source === this.effectState.target || !target.isAlly(source))\n                return;\n            if (move.type === 'Grass') {\n                this.boost({ atk: 1 }, this.effectState.target);\n            }\n        }",
    "flags": {
      "breakable": 1
    },
    "name": "Sap Sipper",
    "rating": 3,
    "num": 157
  },
  "schooling": {
    "onSwitchInPriority": -1,
    "onStart": "onStart(pokemon) {\n            if (pokemon.baseSpecies.baseSpecies !== 'Wishiwashi' || pokemon.level < 20 || pokemon.transformed)\n                return;\n            if (pokemon.hp > pokemon.maxhp / 4) {\n                if (pokemon.species.id === 'wishiwashi') {\n                    pokemon.formeChange('Wishiwashi-School');\n                }\n            }\n            else {\n                if (pokemon.species.id === 'wishiwashischool') {\n                    pokemon.formeChange('Wishiwashi');\n                }\n            }\n        }",
    "onResidualOrder": 29,
    "onResidual": "onResidual(pokemon) {\n            if (pokemon.baseSpecies.baseSpecies !== 'Wishiwashi' || pokemon.level < 20 ||\n                pokemon.transformed || !pokemon.hp)\n                return;\n            if (pokemon.hp > pokemon.maxhp / 4) {\n                if (pokemon.species.id === 'wishiwashi') {\n                    pokemon.formeChange('Wishiwashi-School');\n                }\n            }\n            else {\n                if (pokemon.species.id === 'wishiwashischool') {\n                    pokemon.formeChange('Wishiwashi');\n                }\n            }\n        }",
    "flags": {
      "failroleplay": 1,
      "noreceiver": 1,
      "noentrain": 1,
      "notrace": 1,
      "failskillswap": 1,
      "cantsuppress": 1
    },
    "name": "Schooling",
    "rating": 3,
    "num": 208
  },
  "scrappy": {
    "onModifyMovePriority": -5,
    "onModifyMove": "onModifyMove(move) {\n            if (!move.ignoreImmunity)\n                move.ignoreImmunity = {};\n            if (move.ignoreImmunity !== true) {\n                move.ignoreImmunity['Fighting'] = true;\n                move.ignoreImmunity['Normal'] = true;\n            }\n        }",
    "onTryBoost": "onTryBoost(boost, target, source, effect) {\n            if (effect.name === 'Intimidate' && boost.atk) {\n                delete boost.atk;\n                this.add('-fail', target, 'unboost', 'Attack', '[from] ability: Scrappy', `[of] ${target}`);\n            }\n        }",
    "flags": {},
    "name": "Scrappy",
    "rating": 3,
    "num": 113
  },
  "screencleaner": {
    "onStart": "onStart(pokemon) {\n            let activated = false;\n            for (const sideCondition of ['reflect', 'lightscreen', 'auroraveil']) {\n                for (const side of [pokemon.side, ...pokemon.side.foeSidesWithConditions()]) {\n                    if (side.getSideCondition(sideCondition)) {\n                        if (!activated) {\n                            this.add('-activate', pokemon, 'ability: Screen Cleaner');\n                            activated = true;\n                        }\n                        side.removeSideCondition(sideCondition);\n                    }\n                }\n            }\n        }",
    "flags": {},
    "name": "Screen Cleaner",
    "rating": 2,
    "num": 251
  },
  "seedsower": {
    "onDamagingHit": "onDamagingHit(damage, target, source, move) {\n            this.field.setTerrain('grassyterrain');\n        }",
    "flags": {},
    "name": "Seed Sower",
    "rating": 2.5,
    "num": 269
  },
  "serenegrace": {
    "onModifyMovePriority": -2,
    "onModifyMove": "onModifyMove(move) {\n            if (move.secondaries) {\n                this.debug('doubling secondary chance');\n                for (const secondary of move.secondaries) {\n                    if (secondary.chance)\n                        secondary.chance *= 2;\n                }\n            }\n            if (move.self?.chance)\n                move.self.chance *= 2;\n        }",
    "flags": {},
    "name": "Serene Grace",
    "rating": 3.5,
    "num": 32
  },
  "shadowshield": {
    "onSourceModifyDamage": "onSourceModifyDamage(damage, source, target, move) {\n            if (target.hp >= target.maxhp) {\n                this.debug('Shadow Shield weaken');\n                return this.chainModify(0.5);\n            }\n        }",
    "flags": {},
    "name": "Shadow Shield",
    "rating": 3.5,
    "num": 231
  },
  "shadowtag": {
    "onFoeTrapPokemon": "onFoeTrapPokemon(pokemon) {\n            if (!pokemon.hasAbility('shadowtag') && pokemon.isAdjacent(this.effectState.target)) {\n                pokemon.tryTrap(true);\n            }\n        }",
    "onFoeMaybeTrapPokemon": "onFoeMaybeTrapPokemon(pokemon, source) {\n            if (!source)\n                source = this.effectState.target;\n            if (!source || !pokemon.isAdjacent(source))\n                return;\n            if (!pokemon.hasAbility('shadowtag')) {\n                pokemon.maybeTrapped = true;\n            }\n        }",
    "flags": {},
    "name": "Shadow Tag",
    "rating": 5,
    "num": 23
  },
  "sharpness": {
    "onBasePowerPriority": 19,
    "onBasePower": "onBasePower(basePower, attacker, defender, move) {\n            if (move.flags['slicing']) {\n                this.debug('Sharpness boost');\n                return this.chainModify(1.5);\n            }\n        }",
    "flags": {},
    "name": "Sharpness",
    "rating": 3.5,
    "num": 292
  },
  "shedskin": {
    "onResidualOrder": 5,
    "onResidualSubOrder": 3,
    "onResidual": "onResidual(pokemon) {\n            if (pokemon.hp && pokemon.status && this.randomChance(33, 100)) {\n                this.debug('shed skin');\n                this.add('-activate', pokemon, 'ability: Shed Skin');\n                pokemon.cureStatus();\n            }\n        }",
    "flags": {},
    "name": "Shed Skin",
    "rating": 3,
    "num": 61
  },
  "sheerforce": {
    "onModifyMove": "onModifyMove(move, pokemon) {\n            if (move.secondaries) {\n                delete move.secondaries;\n                // Technically not a secondary effect, but it is negated\n                delete move.self;\n                if (move.id === 'clangoroussoulblaze')\n                    delete move.selfBoost;\n                // Actual negation of `AfterMoveSecondary` effects implemented in scripts.js\n                move.hasSheerForce = true;\n            }\n        }",
    "onBasePowerPriority": 21,
    "onBasePower": "onBasePower(basePower, pokemon, target, move) {\n            if (move.hasSheerForce)\n                return this.chainModify([5325, 4096]);\n        }",
    "flags": {},
    "name": "Sheer Force",
    "rating": 3.5,
    "num": 125
  },
  "shellarmor": {
    "onCriticalHit": false,
    "flags": {
      "breakable": 1
    },
    "name": "Shell Armor",
    "rating": 1,
    "num": 75
  },
  "shielddust": {
    "onModifySecondaries": "onModifySecondaries(secondaries) {\n            this.debug('Shield Dust prevent secondary');\n            return secondaries.filter(effect => !!effect.self);\n        }",
    "flags": {
      "breakable": 1
    },
    "name": "Shield Dust",
    "rating": 2,
    "num": 19
  },
  "shieldsdown": {
    "onSwitchInPriority": -1,
    "onStart": "onStart(pokemon) {\n            if (pokemon.baseSpecies.baseSpecies !== 'Minior' || pokemon.transformed)\n                return;\n            if (pokemon.hp > pokemon.maxhp / 2) {\n                if (pokemon.species.forme !== 'Meteor') {\n                    pokemon.formeChange('Minior-Meteor');\n                }\n            }\n            else {\n                if (pokemon.species.forme === 'Meteor') {\n                    pokemon.formeChange(pokemon.set.species);\n                }\n            }\n        }",
    "onResidualOrder": 29,
    "onResidual": "onResidual(pokemon) {\n            if (pokemon.baseSpecies.baseSpecies !== 'Minior' || pokemon.transformed || !pokemon.hp)\n                return;\n            if (pokemon.hp > pokemon.maxhp / 2) {\n                if (pokemon.species.forme !== 'Meteor') {\n                    pokemon.formeChange('Minior-Meteor');\n                }\n            }\n            else {\n                if (pokemon.species.forme === 'Meteor') {\n                    pokemon.formeChange(pokemon.set.species);\n                }\n            }\n        }",
    "onSetStatus": "onSetStatus(status, target, source, effect) {\n            if (target.species.id !== 'miniormeteor' || target.transformed)\n                return;\n            if (effect?.status) {\n                this.add('-immune', target, '[from] ability: Shields Down');\n            }\n            return false;\n        }",
    "onTryAddVolatile": "onTryAddVolatile(status, target) {\n            if (target.species.id !== 'miniormeteor' || target.transformed)\n                return;\n            if (status.id !== 'yawn')\n                return;\n            this.add('-immune', target, '[from] ability: Shields Down');\n            return null;\n        }",
    "flags": {
      "failroleplay": 1,
      "noreceiver": 1,
      "noentrain": 1,
      "notrace": 1,
      "failskillswap": 1,
      "cantsuppress": 1
    },
    "name": "Shields Down",
    "rating": 3,
    "num": 197
  },
  "simple": {
    "onChangeBoost": "onChangeBoost(boost, target, source, effect) {\n            if (effect && effect.id === 'zpower')\n                return;\n            let i;\n            for (i in boost) {\n                boost[i] *= 2;\n            }\n        }",
    "flags": {
      "breakable": 1
    },
    "name": "Simple",
    "rating": 4,
    "num": 86
  },
  "skilllink": {
    "onModifyMove": "onModifyMove(move) {\n            if (move.multihit && Array.isArray(move.multihit) && move.multihit.length) {\n                move.multihit = move.multihit[1];\n            }\n            if (move.multiaccuracy) {\n                delete move.multiaccuracy;\n            }\n        }",
    "flags": {},
    "name": "Skill Link",
    "rating": 3,
    "num": 92
  },
  "slowstart": {
    "onStart": "onStart(pokemon) {\n            pokemon.addVolatile('slowstart');\n        }",
    "onEnd": "onEnd(pokemon) {\n            delete pokemon.volatiles['slowstart'];\n            this.add('-end', pokemon, 'Slow Start', '[silent]');\n        }",
    "condition": {
      "duration": 5,
      "onResidualOrder": 28,
      "onResidualSubOrder": 2,
      "onStart": "onStart(target) {\n                this.add('-start', target, 'ability: Slow Start');\n            }",
      "onResidual": "onResidual(pokemon) {\n                if (!pokemon.activeTurns) {\n                    this.effectState.duration += 1;\n                }\n            }",
      "onModifyAtkPriority": 5,
      "onModifyAtk": "onModifyAtk(atk, pokemon) {\n                return this.chainModify(0.5);\n            }",
      "onModifySpe": "onModifySpe(spe, pokemon) {\n                return this.chainModify(0.5);\n            }",
      "onEnd": "onEnd(target) {\n                this.add('-end', target, 'Slow Start');\n            }"
    },
    "flags": {},
    "name": "Slow Start",
    "rating": -1,
    "num": 112
  },
  "slushrush": {
    "onModifySpe": "onModifySpe(spe, pokemon) {\n            if (this.field.isWeather(['hail', 'snowscape'])) {\n                return this.chainModify(2);\n            }\n        }",
    "flags": {},
    "name": "Slush Rush",
    "rating": 3,
    "num": 202
  },
  "sniper": {
    "onModifyDamage": "onModifyDamage(damage, source, target, move) {\n            if (target.getMoveHitData(move).crit) {\n                this.debug('Sniper boost');\n                return this.chainModify(1.5);\n            }\n        }",
    "flags": {},
    "name": "Sniper",
    "rating": 2,
    "num": 97
  },
  "snowcloak": {
    "onImmunity": "onImmunity(type, pokemon) {\n            if (type === 'hail')\n                return false;\n        }",
    "onModifyAccuracyPriority": -1,
    "onModifyAccuracy": "onModifyAccuracy(accuracy) {\n            if (typeof accuracy !== 'number')\n                return;\n            if (this.field.isWeather(['hail', 'snowscape'])) {\n                this.debug('Snow Cloak - decreasing accuracy');\n                return this.chainModify([3277, 4096]);\n            }\n        }",
    "flags": {
      "breakable": 1
    },
    "name": "Snow Cloak",
    "rating": 1.5,
    "num": 81
  },
  "snowwarning": {
    "onStart": "onStart(source) {\n            this.field.setWeather('snowscape');\n        }",
    "flags": {},
    "name": "Snow Warning",
    "rating": 4,
    "num": 117
  },
  "solarpower": {
    "onModifySpAPriority": 5,
    "onModifySpA": "onModifySpA(spa, pokemon) {\n            if (['sunnyday', 'desolateland'].includes(pokemon.effectiveWeather())) {\n                return this.chainModify(1.5);\n            }\n        }",
    "onWeather": "onWeather(target, source, effect) {\n            if (target.hasItem('utilityumbrella'))\n                return;\n            if (effect.id === 'sunnyday' || effect.id === 'desolateland') {\n                this.damage(target.baseMaxhp / 8, target, target);\n            }\n        }",
    "flags": {},
    "name": "Solar Power",
    "rating": 2,
    "num": 94
  },
  "solidrock": {
    "onSourceModifyDamage": "onSourceModifyDamage(damage, source, target, move) {\n            if (target.getMoveHitData(move).typeMod > 0) {\n                this.debug('Solid Rock neutralize');\n                return this.chainModify(0.75);\n            }\n        }",
    "flags": {
      "breakable": 1
    },
    "name": "Solid Rock",
    "rating": 3,
    "num": 116
  },
  "soulheart": {
    "onAnyFaintPriority": 1,
    "onAnyFaint": "onAnyFaint() {\n            this.boost({ spa: 1 }, this.effectState.target);\n        }",
    "flags": {},
    "name": "Soul-Heart",
    "rating": 3.5,
    "num": 220
  },
  "soundproof": {
    "onTryHit": "onTryHit(target, source, move) {\n            if (target !== source && move.flags['sound']) {\n                this.add('-immune', target, '[from] ability: Soundproof');\n                return null;\n            }\n        }",
    "onAllyTryHitSide": "onAllyTryHitSide(target, source, move) {\n            if (move.flags['sound']) {\n                this.add('-immune', this.effectState.target, '[from] ability: Soundproof');\n            }\n        }",
    "flags": {
      "breakable": 1
    },
    "name": "Soundproof",
    "rating": 2,
    "num": 43
  },
  "speedboost": {
    "onResidualOrder": 28,
    "onResidualSubOrder": 2,
    "onResidual": "onResidual(pokemon) {\n            if (pokemon.activeTurns) {\n                this.boost({ spe: 1 });\n            }\n        }",
    "flags": {},
    "name": "Speed Boost",
    "rating": 4.5,
    "num": 3
  },
  "stakeout": {
    "onModifyAtkPriority": 5,
    "onModifyAtk": "onModifyAtk(atk, attacker, defender) {\n            if (!defender.activeTurns) {\n                this.debug('Stakeout boost');\n                return this.chainModify(2);\n            }\n        }",
    "onModifySpAPriority": 5,
    "onModifySpA": "onModifySpA(atk, attacker, defender) {\n            if (!defender.activeTurns) {\n                this.debug('Stakeout boost');\n                return this.chainModify(2);\n            }\n        }",
    "flags": {},
    "name": "Stakeout",
    "rating": 4.5,
    "num": 198
  },
  "stall": {
    "onFractionalPriority": -0.1,
    "flags": {},
    "name": "Stall",
    "rating": -1,
    "num": 100
  },
  "stalwart": {
    "onModifyMovePriority": 1,
    "onModifyMove": "onModifyMove(move) {\n            // most of the implementation is in Battle#getTarget\n            move.tracksTarget = move.target !== 'scripted';\n        }",
    "flags": {},
    "name": "Stalwart",
    "rating": 0,
    "num": 242
  },
  "stamina": {
    "onDamagingHit": "onDamagingHit(damage, target, source, effect) {\n            this.boost({ def: 1 });\n        }",
    "flags": {},
    "name": "Stamina",
    "rating": 4,
    "num": 192
  },
  "stancechange": {
    "onModifyMovePriority": 1,
    "onModifyMove": "onModifyMove(move, attacker, defender) {\n            if (attacker.species.baseSpecies !== 'Aegislash' || attacker.transformed)\n                return;\n            if (move.category === 'Status' && move.id !== 'kingsshield')\n                return;\n            const targetForme = (move.id === 'kingsshield' ? 'Aegislash' : 'Aegislash-Blade');\n            if (attacker.species.name !== targetForme)\n                attacker.formeChange(targetForme);\n        }",
    "flags": {
      "failroleplay": 1,
      "noreceiver": 1,
      "noentrain": 1,
      "notrace": 1,
      "failskillswap": 1,
      "cantsuppress": 1
    },
    "name": "Stance Change",
    "rating": 4,
    "num": 176
  },
  "static": {
    "onDamagingHit": "onDamagingHit(damage, target, source, move) {\n            if (this.checkMoveMakesContact(move, source, target)) {\n                if (this.randomChance(3, 10)) {\n                    source.trySetStatus('par', target);\n                }\n            }\n        }",
    "flags": {},
    "name": "Static",
    "rating": 2,
    "num": 9
  },
  "steadfast": {
    "onFlinch": "onFlinch(pokemon) {\n            this.boost({ spe: 1 });\n        }",
    "flags": {},
    "name": "Steadfast",
    "rating": 1,
    "num": 80
  },
  "steamengine": {
    "onDamagingHit": "onDamagingHit(damage, target, source, move) {\n            if (['Water', 'Fire'].includes(move.type)) {\n                this.boost({ spe: 6 });\n            }\n        }",
    "flags": {},
    "name": "Steam Engine",
    "rating": 2,
    "num": 243
  },
  "steelworker": {
    "onModifyAtkPriority": 5,
    "onModifyAtk": "onModifyAtk(atk, attacker, defender, move) {\n            if (move.type === 'Steel') {\n                this.debug('Steelworker boost');\n                return this.chainModify(1.5);\n            }\n        }",
    "onModifySpAPriority": 5,
    "onModifySpA": "onModifySpA(atk, attacker, defender, move) {\n            if (move.type === 'Steel') {\n                this.debug('Steelworker boost');\n                return this.chainModify(1.5);\n            }\n        }",
    "flags": {},
    "name": "Steelworker",
    "rating": 3.5,
    "num": 200
  },
  "steelyspirit": {
    "onAllyBasePowerPriority": 22,
    "onAllyBasePower": "onAllyBasePower(basePower, attacker, defender, move) {\n            if (move.type === 'Steel') {\n                this.debug('Steely Spirit boost');\n                return this.chainModify(1.5);\n            }\n        }",
    "flags": {},
    "name": "Steely Spirit",
    "rating": 3.5,
    "num": 252
  },
  "stench": {
    "onModifyMovePriority": -1,
    "onModifyMove": "onModifyMove(move) {\n            if (move.category !== \"Status\") {\n                this.debug('Adding Stench flinch');\n                if (!move.secondaries)\n                    move.secondaries = [];\n                for (const secondary of move.secondaries) {\n                    if (secondary.volatileStatus === 'flinch')\n                        return;\n                }\n                move.secondaries.push({\n                    chance: 10,\n                    volatileStatus: 'flinch',\n                });\n            }\n        }",
    "flags": {},
    "name": "Stench",
    "rating": 0.5,
    "num": 1
  },
  "stickyhold": {
    "onTakeItem": "onTakeItem(item, pokemon, source) {\n            if (!this.activeMove)\n                throw new Error(\"Battle.activeMove is null\");\n            if (!pokemon.hp || pokemon.item === 'stickybarb')\n                return;\n            if ((source && source !== pokemon) || this.activeMove.id === 'knockoff') {\n                this.add('-activate', pokemon, 'ability: Sticky Hold');\n                return false;\n            }\n        }",
    "flags": {
      "breakable": 1
    },
    "name": "Sticky Hold",
    "rating": 1.5,
    "num": 60
  },
  "stormdrain": {
    "onTryHit": "onTryHit(target, source, move) {\n            if (target !== source && move.type === 'Water') {\n                if (!this.boost({ spa: 1 })) {\n                    this.add('-immune', target, '[from] ability: Storm Drain');\n                }\n                return null;\n            }\n        }",
    "onAnyRedirectTarget": "onAnyRedirectTarget(target, source, source2, move) {\n            if (move.type !== 'Water' || move.flags['pledgecombo'])\n                return;\n            const redirectTarget = ['randomNormal', 'adjacentFoe'].includes(move.target) ? 'normal' : move.target;\n            if (this.validTarget(this.effectState.target, source, redirectTarget)) {\n                if (move.smartTarget)\n                    move.smartTarget = false;\n                if (this.effectState.target !== target) {\n                    this.add('-activate', this.effectState.target, 'ability: Storm Drain');\n                }\n                return this.effectState.target;\n            }\n        }",
    "flags": {
      "breakable": 1
    },
    "name": "Storm Drain",
    "rating": 3,
    "num": 114
  },
  "strongjaw": {
    "onBasePowerPriority": 19,
    "onBasePower": "onBasePower(basePower, attacker, defender, move) {\n            if (move.flags['bite']) {\n                return this.chainModify(1.5);\n            }\n        }",
    "flags": {},
    "name": "Strong Jaw",
    "rating": 3.5,
    "num": 173
  },
  "sturdy": {
    "onTryHit": "onTryHit(pokemon, target, move) {\n            if (move.ohko) {\n                this.add('-immune', pokemon, '[from] ability: Sturdy');\n                return null;\n            }\n        }",
    "onDamagePriority": -30,
    "onDamage": "onDamage(damage, target, source, effect) {\n            if (target.hp === target.maxhp && damage >= target.hp && effect && effect.effectType === 'Move') {\n                this.add('-ability', target, 'Sturdy');\n                return target.hp - 1;\n            }\n        }",
    "flags": {
      "breakable": 1
    },
    "name": "Sturdy",
    "rating": 3,
    "num": 5
  },
  "suctioncups": {
    "onDragOutPriority": 1,
    "onDragOut": "onDragOut(pokemon) {\n            this.add('-activate', pokemon, 'ability: Suction Cups');\n            return null;\n        }",
    "flags": {
      "breakable": 1
    },
    "name": "Suction Cups",
    "rating": 1,
    "num": 21
  },
  "superluck": {
    "onModifyCritRatio": "onModifyCritRatio(critRatio) {\n            return critRatio + 1;\n        }",
    "flags": {},
    "name": "Super Luck",
    "rating": 1.5,
    "num": 105
  },
  "supersweetsyrup": {
    "onStart": "onStart(pokemon) {\n            if (pokemon.syrupTriggered)\n                return;\n            pokemon.syrupTriggered = true;\n            this.add('-ability', pokemon, 'Supersweet Syrup');\n            for (const target of pokemon.adjacentFoes()) {\n                if (target.volatiles['substitute']) {\n                    this.add('-immune', target);\n                }\n                else {\n                    this.boost({ evasion: -1 }, target, pokemon, null, true);\n                }\n            }\n        }",
    "flags": {},
    "name": "Supersweet Syrup",
    "rating": 1.5,
    "num": 306
  },
  "supremeoverlord": {
    "onStart": "onStart(pokemon) {\n            if (pokemon.side.totalFainted) {\n                this.add('-activate', pokemon, 'ability: Supreme Overlord');\n                const fallen = Math.min(pokemon.side.totalFainted, 5);\n                this.add('-start', pokemon, `fallen${fallen}`, '[silent]');\n                this.effectState.fallen = fallen;\n            }\n        }",
    "onEnd": "onEnd(pokemon) {\n            this.add('-end', pokemon, `fallen${this.effectState.fallen}`, '[silent]');\n        }",
    "onBasePowerPriority": 21,
    "onBasePower": "onBasePower(basePower, attacker, defender, move) {\n            if (this.effectState.fallen) {\n                const powMod = [4096, 4506, 4915, 5325, 5734, 6144];\n                this.debug(`Supreme Overlord boost: ${powMod[this.effectState.fallen]}/4096`);\n                return this.chainModify([powMod[this.effectState.fallen], 4096]);\n            }\n        }",
    "flags": {},
    "name": "Supreme Overlord",
    "rating": 4,
    "num": 293
  },
  "surgesurfer": {
    "onModifySpe": "onModifySpe(spe) {\n            if (this.field.isTerrain('electricterrain')) {\n                return this.chainModify(2);\n            }\n        }",
    "flags": {},
    "name": "Surge Surfer",
    "rating": 3,
    "num": 207
  },
  "swarm": {
    "onModifyAtkPriority": 5,
    "onModifyAtk": "onModifyAtk(atk, attacker, defender, move) {\n            if (move.type === 'Bug' && attacker.hp <= attacker.maxhp / 3) {\n                this.debug('Swarm boost');\n                return this.chainModify(1.5);\n            }\n        }",
    "onModifySpAPriority": 5,
    "onModifySpA": "onModifySpA(atk, attacker, defender, move) {\n            if (move.type === 'Bug' && attacker.hp <= attacker.maxhp / 3) {\n                this.debug('Swarm boost');\n                return this.chainModify(1.5);\n            }\n        }",
    "flags": {},
    "name": "Swarm",
    "rating": 2,
    "num": 68
  },
  "sweetveil": {
    "onAllySetStatus": "onAllySetStatus(status, target, source, effect) {\n            if (status.id === 'slp') {\n                this.debug('Sweet Veil interrupts sleep');\n                const effectHolder = this.effectState.target;\n                this.add('-block', target, 'ability: Sweet Veil', `[of] ${effectHolder}`);\n                return null;\n            }\n        }",
    "onAllyTryAddVolatile": "onAllyTryAddVolatile(status, target) {\n            if (status.id === 'yawn') {\n                this.debug('Sweet Veil blocking yawn');\n                const effectHolder = this.effectState.target;\n                this.add('-block', target, 'ability: Sweet Veil', `[of] ${effectHolder}`);\n                return null;\n            }\n        }",
    "flags": {
      "breakable": 1
    },
    "name": "Sweet Veil",
    "rating": 2,
    "num": 175
  },
  "swiftswim": {
    "onModifySpe": "onModifySpe(spe, pokemon) {\n            if (['raindance', 'primordialsea'].includes(pokemon.effectiveWeather())) {\n                return this.chainModify(2);\n            }\n        }",
    "flags": {},
    "name": "Swift Swim",
    "rating": 3,
    "num": 33
  },
  "symbiosis": {
    "onAllyAfterUseItem": "onAllyAfterUseItem(item, pokemon) {\n            if (pokemon.switchFlag)\n                return;\n            const source = this.effectState.target;\n            const myItem = source.takeItem();\n            if (!myItem)\n                return;\n            if (!this.singleEvent('TakeItem', myItem, source.itemState, pokemon, source, this.effect, myItem) ||\n                !pokemon.setItem(myItem)) {\n                source.item = myItem.id;\n                return;\n            }\n            this.add('-activate', source, 'ability: Symbiosis', myItem, `[of] ${pokemon}`);\n        }",
    "flags": {},
    "name": "Symbiosis",
    "rating": 0,
    "num": 180
  },
  "synchronize": {
    "onAfterSetStatus": "onAfterSetStatus(status, target, source, effect) {\n            if (!source || source === target)\n                return;\n            if (effect && effect.id === 'toxicspikes')\n                return;\n            if (status.id === 'slp' || status.id === 'frz')\n                return;\n            this.add('-activate', target, 'ability: Synchronize');\n            // Hack to make status-prevention abilities think Synchronize is a status move\n            // and show messages when activating against it.\n            source.trySetStatus(status, target, { status: status.id, id: 'synchronize' });\n        }",
    "flags": {},
    "name": "Synchronize",
    "rating": 2,
    "num": 28
  },
  "swordofruin": {
    "onStart": "onStart(pokemon) {\n            if (this.suppressingAbility(pokemon))\n                return;\n            this.add('-ability', pokemon, 'Sword of Ruin');\n        }",
    "onAnyModifyDef": "onAnyModifyDef(def, target, source, move) {\n            const abilityHolder = this.effectState.target;\n            if (target.hasAbility('Sword of Ruin'))\n                return;\n            if (!move.ruinedDef?.hasAbility('Sword of Ruin'))\n                move.ruinedDef = abilityHolder;\n            if (move.ruinedDef !== abilityHolder)\n                return;\n            this.debug('Sword of Ruin Def drop');\n            return this.chainModify(0.75);\n        }",
    "flags": {},
    "name": "Sword of Ruin",
    "rating": 4.5,
    "num": 285
  },
  "tabletsofruin": {
    "onStart": "onStart(pokemon) {\n            if (this.suppressingAbility(pokemon))\n                return;\n            this.add('-ability', pokemon, 'Tablets of Ruin');\n        }",
    "onAnyModifyAtk": "onAnyModifyAtk(atk, source, target, move) {\n            const abilityHolder = this.effectState.target;\n            if (source.hasAbility('Tablets of Ruin'))\n                return;\n            if (!move.ruinedAtk)\n                move.ruinedAtk = abilityHolder;\n            if (move.ruinedAtk !== abilityHolder)\n                return;\n            this.debug('Tablets of Ruin Atk drop');\n            return this.chainModify(0.75);\n        }",
    "flags": {},
    "name": "Tablets of Ruin",
    "rating": 4.5,
    "num": 284
  },
  "tangledfeet": {
    "onModifyAccuracyPriority": -1,
    "onModifyAccuracy": "onModifyAccuracy(accuracy, target) {\n            if (typeof accuracy !== 'number')\n                return;\n            if (target?.volatiles['confusion']) {\n                this.debug('Tangled Feet - decreasing accuracy');\n                return this.chainModify(0.5);\n            }\n        }",
    "flags": {
      "breakable": 1
    },
    "name": "Tangled Feet",
    "rating": 1,
    "num": 77
  },
  "tanglinghair": {
    "onDamagingHit": "onDamagingHit(damage, target, source, move) {\n            if (this.checkMoveMakesContact(move, source, target, true)) {\n                this.add('-ability', target, 'Tangling Hair');\n                this.boost({ spe: -1 }, source, target, null, true);\n            }\n        }",
    "flags": {},
    "name": "Tangling Hair",
    "rating": 2,
    "num": 221
  },
  "technician": {
    "onBasePowerPriority": 30,
    "onBasePower": "onBasePower(basePower, attacker, defender, move) {\n            const basePowerAfterMultiplier = this.modify(basePower, this.event.modifier);\n            this.debug(`Base Power: ${basePowerAfterMultiplier}`);\n            if (basePowerAfterMultiplier <= 60) {\n                this.debug('Technician boost');\n                return this.chainModify(1.5);\n            }\n        }",
    "flags": {},
    "name": "Technician",
    "rating": 3.5,
    "num": 101
  },
  "telepathy": {
    "onTryHit": "onTryHit(target, source, move) {\n            if (target !== source && target.isAlly(source) && move.category !== 'Status') {\n                this.add('-activate', target, 'ability: Telepathy');\n                return null;\n            }\n        }",
    "flags": {
      "breakable": 1
    },
    "name": "Telepathy",
    "rating": 0,
    "num": 140
  },
  "teraformzero": {
    "onAfterTerastallization": "onAfterTerastallization(pokemon) {\n            if (pokemon.baseSpecies.name !== 'Terapagos-Stellar')\n                return;\n            if (this.field.weather || this.field.terrain) {\n                this.add('-ability', pokemon, 'Teraform Zero');\n                this.field.clearWeather();\n                this.field.clearTerrain();\n            }\n        }",
    "flags": {
      "failroleplay": 1,
      "noreceiver": 1,
      "noentrain": 1,
      "notrace": 1,
      "failskillswap": 1
    },
    "name": "Teraform Zero",
    "rating": 3,
    "num": 309
  },
  "terashell": {
    "onAnyBeforeMove": "onAnyBeforeMove() {\n            delete this.effectState.resisted;\n        }",
    "onAnyAfterMove": "onAnyAfterMove() {\n            delete this.effectState.resisted;\n        }",
    "flags": {
      "failroleplay": 1,
      "noreceiver": 1,
      "noentrain": 1,
      "notrace": 1,
      "failskillswap": 1,
      "breakable": 1
    },
    "name": "Tera Shell",
    "rating": 3.5,
    "num": 308
  },
  "terashift": {
    "onSwitchInPriority": 2,
    "onSwitchIn": "onSwitchIn(pokemon) {\n            if (pokemon.baseSpecies.baseSpecies !== 'Terapagos')\n                return;\n            if (pokemon.species.forme !== 'Terastal') {\n                this.add('-activate', pokemon, 'ability: Tera Shift');\n                pokemon.formeChange('Terapagos-Terastal', this.effect, true);\n            }\n        }",
    "flags": {
      "failroleplay": 1,
      "noreceiver": 1,
      "noentrain": 1,
      "notrace": 1,
      "failskillswap": 1,
      "cantsuppress": 1,
      "notransform": 1
    },
    "name": "Tera Shift",
    "rating": 3,
    "num": 307
  },
  "teravolt": {
    "onStart": "onStart(pokemon) {\n            this.add('-ability', pokemon, 'Teravolt');\n        }",
    "onModifyMove": "onModifyMove(move) {\n            move.ignoreAbility = true;\n        }",
    "flags": {},
    "name": "Teravolt",
    "rating": 3,
    "num": 164
  },
  "thermalexchange": {
    "onDamagingHit": "onDamagingHit(damage, target, source, move) {\n            if (move.type === 'Fire') {\n                this.boost({ atk: 1 });\n            }\n        }",
    "onUpdate": "onUpdate(pokemon) {\n            if (pokemon.status === 'brn') {\n                this.add('-activate', pokemon, 'ability: Thermal Exchange');\n                pokemon.cureStatus();\n            }\n        }",
    "onSetStatus": "onSetStatus(status, target, source, effect) {\n            if (status.id !== 'brn')\n                return;\n            if (effect?.status) {\n                this.add('-immune', target, '[from] ability: Thermal Exchange');\n            }\n            return false;\n        }",
    "flags": {
      "breakable": 1
    },
    "name": "Thermal Exchange",
    "rating": 2.5,
    "num": 270
  },
  "thickfat": {
    "onSourceModifyAtkPriority": 6,
    "onSourceModifyAtk": "onSourceModifyAtk(atk, attacker, defender, move) {\n            if (move.type === 'Ice' || move.type === 'Fire') {\n                this.debug('Thick Fat weaken');\n                return this.chainModify(0.5);\n            }\n        }",
    "onSourceModifySpAPriority": 5,
    "onSourceModifySpA": "onSourceModifySpA(atk, attacker, defender, move) {\n            if (move.type === 'Ice' || move.type === 'Fire') {\n                this.debug('Thick Fat weaken');\n                return this.chainModify(0.5);\n            }\n        }",
    "flags": {
      "breakable": 1
    },
    "name": "Thick Fat",
    "rating": 3.5,
    "num": 47
  },
  "tintedlens": {
    "onModifyDamage": "onModifyDamage(damage, source, target, move) {\n            if (target.getMoveHitData(move).typeMod < 0) {\n                this.debug('Tinted Lens boost');\n                return this.chainModify(2);\n            }\n        }",
    "flags": {},
    "name": "Tinted Lens",
    "rating": 4,
    "num": 110
  },
  "torrent": {
    "onModifyAtkPriority": 5,
    "onModifyAtk": "onModifyAtk(atk, attacker, defender, move) {\n            if (move.type === 'Water' && attacker.hp <= attacker.maxhp / 3) {\n                this.debug('Torrent boost');\n                return this.chainModify(1.5);\n            }\n        }",
    "onModifySpAPriority": 5,
    "onModifySpA": "onModifySpA(atk, attacker, defender, move) {\n            if (move.type === 'Water' && attacker.hp <= attacker.maxhp / 3) {\n                this.debug('Torrent boost');\n                return this.chainModify(1.5);\n            }\n        }",
    "flags": {},
    "name": "Torrent",
    "rating": 2,
    "num": 67
  },
  "toughclaws": {
    "onBasePowerPriority": 21,
    "onBasePower": "onBasePower(basePower, attacker, defender, move) {\n            if (move.flags['contact']) {\n                return this.chainModify([5325, 4096]);\n            }\n        }",
    "flags": {},
    "name": "Tough Claws",
    "rating": 3.5,
    "num": 181
  },
  "toxicboost": {
    "onBasePowerPriority": 19,
    "onBasePower": "onBasePower(basePower, attacker, defender, move) {\n            if ((attacker.status === 'psn' || attacker.status === 'tox') && move.category === 'Physical') {\n                return this.chainModify(1.5);\n            }\n        }",
    "flags": {},
    "name": "Toxic Boost",
    "rating": 3,
    "num": 137
  },
  "toxicchain": {
    "onSourceDamagingHit": "onSourceDamagingHit(damage, target, source, move) {\n            // Despite not being a secondary, Shield Dust / Covert Cloak block Toxic Chain's effect\n            if (target.hasAbility('shielddust') || target.hasItem('covertcloak'))\n                return;\n            if (this.randomChance(3, 10)) {\n                target.trySetStatus('tox', source);\n            }\n        }",
    "flags": {},
    "name": "Toxic Chain",
    "rating": 4.5,
    "num": 305
  },
  "toxicdebris": {
    "onDamagingHit": "onDamagingHit(damage, target, source, move) {\n            const side = source.isAlly(target) ? source.side.foe : source.side;\n            const toxicSpikes = side.sideConditions['toxicspikes'];\n            if (move.category === 'Physical' && (!toxicSpikes || toxicSpikes.layers < 2)) {\n                this.add('-activate', target, 'ability: Toxic Debris');\n                side.addSideCondition('toxicspikes', target);\n            }\n        }",
    "flags": {},
    "name": "Toxic Debris",
    "rating": 3.5,
    "num": 295
  },
  "trace": {
    "onStart": "onStart(pokemon) {\n            this.effectState.seek = true;\n            // n.b. only affects Hackmons\n            // interaction with No Ability is complicated: https://www.smogon.com/forums/threads/pokemon-sun-moon-battle-mechanics-research.3586701/page-76#post-7790209\n            if (pokemon.adjacentFoes().some(foeActive => foeActive.ability === 'noability')) {\n                this.effectState.seek = false;\n            }\n            // interaction with Ability Shield is similar to No Ability\n            if (pokemon.hasItem('Ability Shield')) {\n                this.add('-block', pokemon, 'item: Ability Shield');\n                this.effectState.seek = false;\n            }\n            if (this.effectState.seek) {\n                this.singleEvent('Update', this.effect, this.effectState, pokemon);\n            }\n        }",
    "onUpdate": "onUpdate(pokemon) {\n            if (!this.effectState.seek)\n                return;\n            const possibleTargets = pokemon.adjacentFoes().filter(target => !target.getAbility().flags['notrace'] && target.ability !== 'noability');\n            if (!possibleTargets.length)\n                return;\n            const target = this.sample(possibleTargets);\n            const ability = target.getAbility();\n            if (pokemon.setAbility(ability)) {\n                this.add('-ability', pokemon, ability, '[from] ability: Trace', `[of] ${target}`);\n            }\n        }",
    "flags": {
      "failroleplay": 1,
      "noreceiver": 1,
      "noentrain": 1,
      "notrace": 1
    },
    "name": "Trace",
    "rating": 2.5,
    "num": 36
  },
  "transistor": {
    "onModifyAtkPriority": 5,
    "onModifyAtk": "onModifyAtk(atk, attacker, defender, move) {\n            if (move.type === 'Electric') {\n                this.debug('Transistor boost');\n                return this.chainModify([5325, 4096]);\n            }\n        }",
    "onModifySpAPriority": 5,
    "onModifySpA": "onModifySpA(atk, attacker, defender, move) {\n            if (move.type === 'Electric') {\n                this.debug('Transistor boost');\n                return this.chainModify([5325, 4096]);\n            }\n        }",
    "flags": {},
    "name": "Transistor",
    "rating": 3.5,
    "num": 262
  },
  "triage": {
    "onModifyPriority": "onModifyPriority(priority, pokemon, target, move) {\n            if (move?.flags['heal'])\n                return priority + 3;\n        }",
    "flags": {},
    "name": "Triage",
    "rating": 3.5,
    "num": 205
  },
  "truant": {
    "onStart": "onStart(pokemon) {\n            pokemon.removeVolatile('truant');\n            if (pokemon.activeTurns && (pokemon.moveThisTurnResult !== undefined || !this.queue.willMove(pokemon))) {\n                pokemon.addVolatile('truant');\n            }\n        }",
    "onBeforeMovePriority": 9,
    "onBeforeMove": "onBeforeMove(pokemon) {\n            if (pokemon.removeVolatile('truant')) {\n                this.add('cant', pokemon, 'ability: Truant');\n                return false;\n            }\n            pokemon.addVolatile('truant');\n        }",
    "condition": {},
    "flags": {},
    "name": "Truant",
    "rating": -1,
    "num": 54
  },
  "turboblaze": {
    "onStart": "onStart(pokemon) {\n            this.add('-ability', pokemon, 'Turboblaze');\n        }",
    "onModifyMove": "onModifyMove(move) {\n            move.ignoreAbility = true;\n        }",
    "flags": {},
    "name": "Turboblaze",
    "rating": 3,
    "num": 163
  },
  "unaware": {
    "onAnyModifyBoost": "onAnyModifyBoost(boosts, pokemon) {\n            const unawareUser = this.effectState.target;\n            if (unawareUser === pokemon)\n                return;\n            if (unawareUser === this.activePokemon && pokemon === this.activeTarget) {\n                boosts['def'] = 0;\n                boosts['spd'] = 0;\n                boosts['evasion'] = 0;\n            }\n            if (pokemon === this.activePokemon && unawareUser === this.activeTarget) {\n                boosts['atk'] = 0;\n                boosts['def'] = 0;\n                boosts['spa'] = 0;\n                boosts['accuracy'] = 0;\n            }\n        }",
    "flags": {
      "breakable": 1
    },
    "name": "Unaware",
    "rating": 4,
    "num": 109
  },
  "unburden": {
    "onAfterUseItem": "onAfterUseItem(item, pokemon) {\n            if (pokemon !== this.effectState.target)\n                return;\n            pokemon.addVolatile('unburden');\n        }",
    "onTakeItem": "onTakeItem(item, pokemon) {\n            pokemon.addVolatile('unburden');\n        }",
    "onEnd": "onEnd(pokemon) {\n            pokemon.removeVolatile('unburden');\n        }",
    "condition": {
      "onModifySpe": "onModifySpe(spe, pokemon) {\n                if (!pokemon.item && !pokemon.ignoringAbility()) {\n                    return this.chainModify(2);\n                }\n            }"
    },
    "flags": {},
    "name": "Unburden",
    "rating": 3.5,
    "num": 84
  },
  "unnerve": {
    "onSwitchInPriority": 1,
    "onStart": "onStart(pokemon) {\n            if (this.effectState.unnerved)\n                return;\n            this.add('-ability', pokemon, 'Unnerve');\n            this.effectState.unnerved = true;\n        }",
    "onEnd": "onEnd() {\n            this.effectState.unnerved = false;\n        }",
    "onFoeTryEatItem": "onFoeTryEatItem() {\n            return !this.effectState.unnerved;\n        }",
    "flags": {},
    "name": "Unnerve",
    "rating": 1,
    "num": 127
  },
  "unseenfist": {
    "onModifyMove": "onModifyMove(move) {\n            if (move.flags['contact'])\n                delete move.flags['protect'];\n        }",
    "flags": {},
    "name": "Unseen Fist",
    "rating": 2,
    "num": 260
  },
  "vesselofruin": {
    "onStart": "onStart(pokemon) {\n            if (this.suppressingAbility(pokemon))\n                return;\n            this.add('-ability', pokemon, 'Vessel of Ruin');\n        }",
    "onAnyModifySpA": "onAnyModifySpA(spa, source, target, move) {\n            const abilityHolder = this.effectState.target;\n            if (source.hasAbility('Vessel of Ruin'))\n                return;\n            if (!move.ruinedSpA)\n                move.ruinedSpA = abilityHolder;\n            if (move.ruinedSpA !== abilityHolder)\n                return;\n            this.debug('Vessel of Ruin SpA drop');\n            return this.chainModify(0.75);\n        }",
    "flags": {},
    "name": "Vessel of Ruin",
    "rating": 4.5,
    "num": 284
  },
  "victorystar": {
    "onAnyModifyAccuracyPriority": -1,
    "onAnyModifyAccuracy": "onAnyModifyAccuracy(accuracy, target, source) {\n            if (source.isAlly(this.effectState.target) && typeof accuracy === 'number') {\n                return this.chainModify([4506, 4096]);\n            }\n        }",
    "flags": {},
    "name": "Victory Star",
    "rating": 2,
    "num": 162
  },
  "vitalspirit": {
    "onUpdate": "onUpdate(pokemon) {\n            if (pokemon.status === 'slp') {\n                this.add('-activate', pokemon, 'ability: Vital Spirit');\n                pokemon.cureStatus();\n            }\n        }",
    "onSetStatus": "onSetStatus(status, target, source, effect) {\n            if (status.id !== 'slp')\n                return;\n            if (effect?.status) {\n                this.add('-immune', target, '[from] ability: Vital Spirit');\n            }\n            return false;\n        }",
    "onTryAddVolatile": "onTryAddVolatile(status, target) {\n            if (status.id === 'yawn') {\n                this.add('-immune', target, '[from] ability: Vital Spirit');\n                return null;\n            }\n        }",
    "flags": {
      "breakable": 1
    },
    "name": "Vital Spirit",
    "rating": 1.5,
    "num": 72
  },
  "voltabsorb": {
    "onTryHit": "onTryHit(target, source, move) {\n            if (target !== source && move.type === 'Electric') {\n                if (!this.heal(target.baseMaxhp / 4)) {\n                    this.add('-immune', target, '[from] ability: Volt Absorb');\n                }\n                return null;\n            }\n        }",
    "flags": {
      "breakable": 1
    },
    "name": "Volt Absorb",
    "rating": 3.5,
    "num": 10
  },
  "wanderingspirit": {
    "onDamagingHit": "onDamagingHit(damage, target, source, move) {\n            if (source.getAbility().flags['failskillswap'] || target.volatiles['dynamax'])\n                return;\n            if (this.checkMoveMakesContact(move, source, target)) {\n                const targetCanBeSet = this.runEvent('SetAbility', target, source, this.effect, source.ability);\n                if (!targetCanBeSet)\n                    return targetCanBeSet;\n                const sourceAbility = source.setAbility('wanderingspirit', target);\n                if (!sourceAbility)\n                    return;\n                if (target.isAlly(source)) {\n                    this.add('-activate', target, 'Skill Swap', '', '', `[of] ${source}`);\n                }\n                else {\n                    this.add('-activate', target, 'ability: Wandering Spirit', this.dex.abilities.get(sourceAbility).name, 'Wandering Spirit', `[of] ${source}`);\n                }\n                target.setAbility(sourceAbility);\n            }\n        }",
    "flags": {},
    "name": "Wandering Spirit",
    "rating": 2.5,
    "num": 254
  },
  "waterabsorb": {
    "onTryHit": "onTryHit(target, source, move) {\n            if (target !== source && move.type === 'Water') {\n                if (!this.heal(target.baseMaxhp / 4)) {\n                    this.add('-immune', target, '[from] ability: Water Absorb');\n                }\n                return null;\n            }\n        }",
    "flags": {
      "breakable": 1
    },
    "name": "Water Absorb",
    "rating": 3.5,
    "num": 11
  },
  "waterbubble": {
    "onSourceModifyAtkPriority": 5,
    "onSourceModifyAtk": "onSourceModifyAtk(atk, attacker, defender, move) {\n            if (move.type === 'Fire') {\n                return this.chainModify(0.5);\n            }\n        }",
    "onSourceModifySpAPriority": 5,
    "onSourceModifySpA": "onSourceModifySpA(atk, attacker, defender, move) {\n            if (move.type === 'Fire') {\n                return this.chainModify(0.5);\n            }\n        }",
    "onModifyAtk": "onModifyAtk(atk, attacker, defender, move) {\n            if (move.type === 'Water') {\n                return this.chainModify(2);\n            }\n        }",
    "onModifySpA": "onModifySpA(atk, attacker, defender, move) {\n            if (move.type === 'Water') {\n                return this.chainModify(2);\n            }\n        }",
    "onUpdate": "onUpdate(pokemon) {\n            if (pokemon.status === 'brn') {\n                this.add('-activate', pokemon, 'ability: Water Bubble');\n                pokemon.cureStatus();\n            }\n        }",
    "onSetStatus": "onSetStatus(status, target, source, effect) {\n            if (status.id !== 'brn')\n                return;\n            if (effect?.status) {\n                this.add('-immune', target, '[from] ability: Water Bubble');\n            }\n            return false;\n        }",
    "flags": {
      "breakable": 1
    },
    "name": "Water Bubble",
    "rating": 4.5,
    "num": 199
  },
  "watercompaction": {
    "onDamagingHit": "onDamagingHit(damage, target, source, move) {\n            if (move.type === 'Water') {\n                this.boost({ def: 2 });\n            }\n        }",
    "flags": {},
    "name": "Water Compaction",
    "rating": 1.5,
    "num": 195
  },
  "waterveil": {
    "onUpdate": "onUpdate(pokemon) {\n            if (pokemon.status === 'brn') {\n                this.add('-activate', pokemon, 'ability: Water Veil');\n                pokemon.cureStatus();\n            }\n        }",
    "onSetStatus": "onSetStatus(status, target, source, effect) {\n            if (status.id !== 'brn')\n                return;\n            if (effect?.status) {\n                this.add('-immune', target, '[from] ability: Water Veil');\n            }\n            return false;\n        }",
    "flags": {
      "breakable": 1
    },
    "name": "Water Veil",
    "rating": 2,
    "num": 41
  },
  "weakarmor": {
    "onDamagingHit": "onDamagingHit(damage, target, source, move) {\n            if (move.category === 'Physical') {\n                this.boost({ def: -1, spe: 2 }, target, target);\n            }\n        }",
    "flags": {},
    "name": "Weak Armor",
    "rating": 1,
    "num": 133
  },
  "wellbakedbody": {
    "onTryHit": "onTryHit(target, source, move) {\n            if (target !== source && move.type === 'Fire') {\n                if (!this.boost({ def: 2 })) {\n                    this.add('-immune', target, '[from] ability: Well-Baked Body');\n                }\n                return null;\n            }\n        }",
    "flags": {
      "breakable": 1
    },
    "name": "Well-Baked Body",
    "rating": 3.5,
    "num": 273
  },
  "whitesmoke": {
    "onTryBoost": "onTryBoost(boost, target, source, effect) {\n            if (source && target === source)\n                return;\n            let showMsg = false;\n            let i;\n            for (i in boost) {\n                if (boost[i] < 0) {\n                    delete boost[i];\n                    showMsg = true;\n                }\n            }\n            if (showMsg && !effect.secondaries && effect.id !== 'octolock') {\n                this.add(\"-fail\", target, \"unboost\", \"[from] ability: White Smoke\", `[of] ${target}`);\n            }\n        }",
    "flags": {
      "breakable": 1
    },
    "name": "White Smoke",
    "rating": 2,
    "num": 73
  },
  "wimpout": {
    "onEmergencyExit": "onEmergencyExit(target) {\n            if (!this.canSwitch(target.side) || target.forceSwitchFlag || target.switchFlag)\n                return;\n            for (const side of this.sides) {\n                for (const active of side.active) {\n                    active.switchFlag = false;\n                }\n            }\n            target.switchFlag = true;\n            this.add('-activate', target, 'ability: Wimp Out');\n        }",
    "flags": {},
    "name": "Wimp Out",
    "rating": 1,
    "num": 193
  },
  "windpower": {
    "onDamagingHitOrder": 1,
    "onDamagingHit": "onDamagingHit(damage, target, source, move) {\n            if (move.flags['wind']) {\n                target.addVolatile('charge');\n            }\n        }",
    "onSideConditionStart": "onSideConditionStart(side, source, sideCondition) {\n            const pokemon = this.effectState.target;\n            if (sideCondition.id === 'tailwind') {\n                pokemon.addVolatile('charge');\n            }\n        }",
    "flags": {},
    "name": "Wind Power",
    "rating": 1,
    "num": 277
  },
  "windrider": {
    "onStart": "onStart(pokemon) {\n            if (pokemon.side.sideConditions['tailwind']) {\n                this.boost({ atk: 1 }, pokemon, pokemon);\n            }\n        }",
    "onTryHit": "onTryHit(target, source, move) {\n            if (target !== source && move.flags['wind']) {\n                if (!this.boost({ atk: 1 }, target, target)) {\n                    this.add('-immune', target, '[from] ability: Wind Rider');\n                }\n                return null;\n            }\n        }",
    "onSideConditionStart": "onSideConditionStart(side, source, sideCondition) {\n            const pokemon = this.effectState.target;\n            if (sideCondition.id === 'tailwind') {\n                this.boost({ atk: 1 }, pokemon, pokemon);\n            }\n        }",
    "flags": {
      "breakable": 1
    },
    "name": "Wind Rider",
    "rating": 3.5,
    "num": 274
  },
  "wonderguard": {
    "onTryHit": "onTryHit(target, source, move) {\n            if (target === source || move.category === 'Status' || move.type === '???' || move.id === 'struggle')\n                return;\n            if (move.id === 'skydrop' && !source.volatiles['skydrop'])\n                return;\n            this.debug('Wonder Guard immunity: ' + move.id);\n            if (target.runEffectiveness(move) <= 0 || !target.runImmunity(move)) {\n                if (move.smartTarget) {\n                    move.smartTarget = false;\n                }\n                else {\n                    this.add('-immune', target, '[from] ability: Wonder Guard');\n                }\n                return null;\n            }\n        }",
    "flags": {
      "failroleplay": 1,
      "noreceiver": 1,
      "noentrain": 1,
      "failskillswap": 1,
      "breakable": 1
    },
    "name": "Wonder Guard",
    "rating": 5,
    "num": 25
  },
  "wonderskin": {
    "onModifyAccuracyPriority": 10,
    "onModifyAccuracy": "onModifyAccuracy(accuracy, target, source, move) {\n            if (move.category === 'Status' && typeof accuracy === 'number') {\n                this.debug('Wonder Skin - setting accuracy to 50');\n                return 50;\n            }\n        }",
    "flags": {
      "breakable": 1
    },
    "name": "Wonder Skin",
    "rating": 2,
    "num": 147
  },
  "zenmode": {
    "onResidualOrder": 29,
    "onResidual": "onResidual(pokemon) {\n            if (pokemon.baseSpecies.baseSpecies !== 'Darmanitan' || pokemon.transformed) {\n                return;\n            }\n            if (pokemon.hp <= pokemon.maxhp / 2 && !['Zen', 'Galar-Zen'].includes(pokemon.species.forme)) {\n                pokemon.addVolatile('zenmode');\n            }\n            else if (pokemon.hp > pokemon.maxhp / 2 && ['Zen', 'Galar-Zen'].includes(pokemon.species.forme)) {\n                pokemon.addVolatile('zenmode'); // in case of base Darmanitan-Zen\n                pokemon.removeVolatile('zenmode');\n            }\n        }",
    "onEnd": "onEnd(pokemon) {\n            if (!pokemon.volatiles['zenmode'] || !pokemon.hp)\n                return;\n            pokemon.transformed = false;\n            delete pokemon.volatiles['zenmode'];\n            if (pokemon.species.baseSpecies === 'Darmanitan' && pokemon.species.battleOnly) {\n                pokemon.formeChange(pokemon.species.battleOnly, this.effect, false, '0', '[silent]');\n            }\n        }",
    "condition": {
      "onStart": "onStart(pokemon) {\n                if (!pokemon.species.name.includes('Galar')) {\n                    if (pokemon.species.id !== 'darmanitanzen')\n                        pokemon.formeChange('Darmanitan-Zen');\n                }\n                else {\n                    if (pokemon.species.id !== 'darmanitangalarzen')\n                        pokemon.formeChange('Darmanitan-Galar-Zen');\n                }\n            }",
      "onEnd": "onEnd(pokemon) {\n                if (['Zen', 'Galar-Zen'].includes(pokemon.species.forme)) {\n                    pokemon.formeChange(pokemon.species.battleOnly);\n                }\n            }"
    },
    "flags": {
      "failroleplay": 1,
      "noreceiver": 1,
      "noentrain": 1,
      "notrace": 1,
      "failskillswap": 1,
      "cantsuppress": 1
    },
    "name": "Zen Mode",
    "rating": 0,
    "num": 161
  },
  "zerotohero": {
    "onSwitchOut": "onSwitchOut(pokemon) {\n            if (pokemon.baseSpecies.baseSpecies !== 'Palafin')\n                return;\n            if (pokemon.species.forme !== 'Hero') {\n                pokemon.formeChange('Palafin-Hero', this.effect, true);\n            }\n        }",
    "onSwitchIn": "onSwitchIn(pokemon) {\n            if (pokemon.baseSpecies.baseSpecies !== 'Palafin')\n                return;\n            if (!this.effectState.heroMessageDisplayed && pokemon.species.forme === 'Hero') {\n                this.add('-activate', pokemon, 'ability: Zero to Hero');\n                this.effectState.heroMessageDisplayed = true;\n            }\n        }",
    "flags": {
      "failroleplay": 1,
      "noreceiver": 1,
      "noentrain": 1,
      "notrace": 1,
      "failskillswap": 1,
      "cantsuppress": 1,
      "notransform": 1
    },
    "name": "Zero to Hero",
    "rating": 5,
    "num": 278
  },
  "mountaineer": {
    "onDamage": "onDamage(damage, target, source, effect) {\n            if (effect && effect.id === 'stealthrock') {\n                return false;\n            }\n        }",
    "onTryHit": "onTryHit(target, source, move) {\n            if (move.type === 'Rock' && !target.activeTurns) {\n                this.add('-immune', target, '[from] ability: Mountaineer');\n                return null;\n            }\n        }",
    "isNonstandard": "CAP",
    "flags": {
      "breakable": 1
    },
    "name": "Mountaineer",
    "rating": 3,
    "num": -1
  },
  "rebound": {
    "isNonstandard": "CAP",
    "onTryHitPriority": 1,
    "onTryHit": "onTryHit(target, source, move) {\n            if (this.effectState.target.activeTurns)\n                return;\n            if (target === source || move.hasBounced || !move.flags['reflectable'] || target.isSemiInvulnerable()) {\n                return;\n            }\n            const newMove = this.dex.getActiveMove(move.id);\n            newMove.hasBounced = true;\n            newMove.pranksterBoosted = false;\n            this.actions.useMove(newMove, target, { target: source });\n            return null;\n        }",
    "onAllyTryHitSide": "onAllyTryHitSide(target, source, move) {\n            if (this.effectState.target.activeTurns)\n                return;\n            if (target.isAlly(source) || move.hasBounced || !move.flags['reflectable'] || target.isSemiInvulnerable()) {\n                return;\n            }\n            const newMove = this.dex.getActiveMove(move.id);\n            newMove.hasBounced = true;\n            newMove.pranksterBoosted = false;\n            this.actions.useMove(newMove, this.effectState.target, { target: source });\n            move.hasBounced = true; // only bounce once in free-for-all battles\n            return null;\n        }",
    "flags": {
      "breakable": 1
    },
    "name": "Rebound",
    "rating": 3,
    "num": -2
  },
  "persistent": {
    "isNonstandard": "CAP",
    "flags": {},
    "name": "Persistent",
    "rating": 3,
    "num": -3
  }
}